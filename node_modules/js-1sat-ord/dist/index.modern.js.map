{"version":3,"file":"index.modern.js","sources":["../src/utils/strings.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/types.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/utils/paymail.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts","../src/utils/fetch.ts","../src/utils/broadcast.ts","../src/utils/httpClient.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tinscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\treturn applyInscription(lockingScript, inscription, metaData);\n\t}\n}\n\nexport const applyInscription = (lockingScript: LockingScript, inscription?: Inscription, metaData?: MAP, withSeparator=false) => {\n\tlet ordAsm = \"\";\n\t// This can be omitted for reinscriptions that just update metadata\n\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\tconst ordHex = toHex(\"ord\");\n\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\tif (!fileHex) {\n\t\t\tthrow new Error(\"Invalid file data\");\n\t\t}\n\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\tif (!fileMediaType) {\n\t\t\tthrow new Error(\"Invalid media type\");\n\t\t}\n\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t}\n\n\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ${withSeparator ? 'OP_CODESEPARATOR ' : ''}` : \"\"}${lockingScript.toASM()}`;\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} ` : \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\tvalue as string,\n\t\t\t\t)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn LockingScript.fromASM(inscriptionAsm);\n}\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} tokens - Number of tokens in whole token display format. Ex. 0.5 for 0.5 tokens. Library handles conversion to 'tsat' format.\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  tokens: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} tokens - Number of tokens in whole token display format. Ex. 0.5 for 0.5 tokens. Library handles conversion to 'tsat' format. \n * @property {boolean} [omitMetaData] - Optional. Set to true to omit metadata from this distribution's output.\n */\nexport type Distribution = {\n  address: string | Script;\n  tokens: number;\n  omitMetaData?: boolean;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n  pk?: PrivateKey;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n  pk?: PrivateKey;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string in 'tsat' format. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n  pk?: PrivateKey;\n}\n\nexport enum TokenSelectionStrategy {\n  SmallestFirst = \"smallest\",\n  LargestFirst = \"largest\",\n  RetainOrder = \"retain\",\n  Random = \"random\",\n}\n\nexport interface TokenSelectionOptions {\n  inputStrategy?: TokenSelectionStrategy;\n  outputStrategy?: TokenSelectionStrategy;\n}\n\nexport interface TokenSelectionResult {\n  selectedUtxos: TokenUtxo[];\n  totalSelected: number;\n  isEnough: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk?: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk?: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk?: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo[];\n}\n\n/**\n * Configuration object for token outputs\n * @typedef {Object} TokenSplitConfig\n * @property {number} outputs - Number of outputs to split the token into. Default is 1.\n * @property {number} threshold - Optional. Minimum amount of tokens per output.\n * @property {boolean} omitMetaData - Set to true to omit metadata from the token change outputs\n **/\nexport type TokenSplitConfig = {\n  outputs: number;\n  threshold?: number;\n  omitMetaData?: boolean;\n}\n\nexport enum TokenInputMode {\n  All = \"all\",\n  Needed = \"needed\",\n}\n\n/**\n * Configuration object for transferring token ordinals\n * @typedef {Object} TransferOrdTokensConfig\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be transferred\n * @property {Distribution[]} distributions - Array of Distribution objects\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} [changeAddress] - Optional. Address to send the change\n * @property {string} [tokenChangeAddress] - Optional. Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {PreMAP} [metaData] - Optional. MAP metadata object\n * @property {LocalSigner | RemoteSigner} [signer] - Optional. Signer object\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {boolean} [burn] - Optional. Set to true to burn the input tokens\n * @property {TokenSplitConfig} [splitConfig] - Optional. Configuration object for splitting token change\n * @property {TokenInputMode} [tokenInputMode] - Optional. Token input mode. Default is \"needed\"\n */\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  inputMode?: TokenInputMode;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n  splitConfig?: TokenSplitConfig;\n  tokenInputMode?: TokenInputMode;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk?: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, type TokenSelectionOptions, type TokenSelectionResult, TokenSelectionStrategy, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\nimport { toToken } from \"satoshi-token\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: Utxo) => u.satoshis !== 1 && !isLock(u));\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @param {number} [limit=10] - Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Offset for fetching utxos. Default is 0\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n  limit = 10,\n  offset = 0,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false&limit=${limit}&offset=${offset}`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n\nconst isLock = (utxo: Utxo) => {\n  return !!(utxo as unknown as { lock: { address: string, until: number } }).lock;\n}\n\n/**\n * Selects token UTXOs based on the required amount and specified strategies.\n * @param {TokenUtxo[]} tokenUtxos - Array of token UTXOs.\n * @param {number} requiredTokens - Required amount in tokens (displayed amount).\n * @param {number} decimals - Number of decimal places for the token.\n * @param {TokenSelectionOptions} [options={}] - Options for token selection.\n * @returns {TokenSelectionResult} Selected token UTXOs and total selected amount.\n */\nexport const selectTokenUtxos = (\n  tokenUtxos: TokenUtxo[],\n  requiredTokens: number,\n  decimals: number,\n  options: TokenSelectionOptions = {}\n): TokenSelectionResult => {\n  const {\n    inputStrategy = TokenSelectionStrategy.RetainOrder,\n    outputStrategy = TokenSelectionStrategy.RetainOrder,\n  } = options;\n  \n  // Sort the UTXOs based on the input strategy\n  const sortedUtxos = [...tokenUtxos].sort((a, b) => {\n    if (inputStrategy === TokenSelectionStrategy.RetainOrder) return 0;\n    const amtA = BigInt(a.amt);\n    const amtB = BigInt(b.amt);\n\n    switch (inputStrategy) {\n      case TokenSelectionStrategy.SmallestFirst:\n        return Number(amtA - amtB);\n      case TokenSelectionStrategy.LargestFirst:\n        return Number(amtB - amtA);\n      case TokenSelectionStrategy.Random:\n        return Math.random() - 0.5;\n      default:\n        return 0;\n    }\n  });\n\n  let totalSelected = 0;\n  const selectedUtxos: TokenUtxo[] = [];\n\n  for (const utxo of sortedUtxos) {\n    selectedUtxos.push(utxo);\n    totalSelected += toToken(utxo.amt, decimals);\n    if (totalSelected >= requiredTokens && requiredTokens > 0) {\n      break;\n    }\n  }\n\n  // Sort the selected UTXOs based on the output strategy\n  if (outputStrategy !== TokenSelectionStrategy.RetainOrder) {\n    selectedUtxos.sort((a, b) => {\n      const amtA = BigInt(a.amt);\n      const amtB = BigInt(b.amt);\n\n      switch (outputStrategy) {\n        case TokenSelectionStrategy.SmallestFirst:\n          return Number(amtA - amtB);\n        case TokenSelectionStrategy.LargestFirst:\n          return Number(amtB - amtA);\n        case TokenSelectionStrategy.Random:\n          return Math.random() - 0.5;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return {\n    selectedUtxos,\n    totalSelected,\n    isEnough: totalSelected >= requiredTokens\n  };\n};","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the transaction\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the transaction\");\n\t\t}\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst {ordPk, paymentPk} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n    const ordKeyToUse = ordUtxo.pk || ordPk;\n\t\tif (!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the ordinal\");\n\t\t}\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordKeyToUse, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} - Returns a ChangeResult: payChange, tx, and spentOutputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the utxos\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse,\n\t\t\t\"all\",\n\t\t\ttrue,\n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n  // Change\n\tlet payChange: Utxo | undefined;\n  // if we need to send change, add it to the outputs\n\tif (totalSatsIn > totalSatsOut + fee) {\n    const changeAddress = config.changeAddress || paymentPk?.toAddress();\n    if(!changeAddress) {\n      throw new Error(\"Either changeAddress or paymentPk is required\");\n    }\n    const changeScript = new P2PKH().lock(changeAddress);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH, { applyInscription } from \"./templates/ordP2pkh\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TokenChangeResult,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tTokenInputMode,\n\ttype TokenSplitConfig,\n\ttype PreMAP,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\nimport { ReturnTypes, toToken, toTokenSat } from \"satoshi-token\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {TokenInputMode} [config.tokenInputMode] - Optional. \"all\" or \"needed\". Default is \"needed\"\n * @param {TokenSplitConfig} [config.tokenSplitConfig] - Optional. Configuration object for splitting token change\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tconfig: TransferOrdTokensConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tdecimals,\n\t\tadditionalPayments = [],\n\t\tburn = false,\n\t\ttokenInputMode = TokenInputMode.Needed,\n\t\tsplitConfig = {\n\t\t\toutputs: 1,\n\t\t\tomitMetaData: false,\n\t\t},\n\t} = config;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeTsats = 0n;\n\tlet totalTsatIn = 0n;\n\tlet totalTsatOut = 0n;\n\tconst totalAmtNeeded = distributions.reduce(\n\t\t(acc, dist) => acc + toTokenSat(dist.tokens, decimals, ReturnTypes.BigInt),\n\t\t0n,\n\t);\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Handle token inputs based on tokenInputMode\n\tlet tokensToUse: TokenUtxo[];\n\tif (tokenInputMode === TokenInputMode.All) {\n\t\ttokensToUse = inputTokens;\n\t\ttotalTsatIn = inputTokens.reduce(\n\t\t\t(acc, token) => acc + BigInt(token.amt),\n\t\t\t0n,\n\t\t);\n\t} else {\n\t\ttokensToUse = [];\n\t\tfor (const token of inputTokens) {\n\t\t\ttokensToUse.push(token);\n\t\t\ttotalTsatIn += BigInt(token.amt);\n\t\t\tif (totalTsatIn >= totalAmtNeeded) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (totalTsatIn < totalAmtNeeded) {\n\t\t\tthrow new Error(\"Not enough tokens to satisfy the transfer amount\");\n\t\t}\n\t}\n\n\tfor (const token of tokensToUse) {\n    const ordKeyToUse = token.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(\n\t\t\tinputFromB64Utxo(\n\t\t\t\ttoken,\n\t\t\t\tnew OrdP2PKH().unlock(ordKeyToUse, \"all\", true, token.satoshis, inputScript),\n\t\t\t),\n\t\t);\n\t}\n\n\t// remove any undefined fields from metadata\n\tif (metaData) {\n\t\tfor (const key of Object.keys(metaData)) {\n\t\t\tif (metaData[key] === undefined) {\n\t\t\t\tdelete metaData[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst bigAmt = toTokenSat(dest.tokens, decimals, ReturnTypes.BigInt);\n    console.log({distTokenSat: bigAmt});\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: bigAmt.toString(),\n\t\t};\n\t\tlet inscriptionObj: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscriptionObj = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscriptionObj = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst inscription = {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscriptionObj)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t}\n\t\tlet lockingScript = typeof dest.address == 'string' ?\n\t\t\tnew OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\tinscription,\n\t\t\t\t// when present, include metadata on each distribution if omit is not specified\n\t\t\t\tdest.omitMetaData ? undefined : stringifyMetaData(metaData),\n\t\t\t) :\n\t\t\tapplyInscription(dest.address, inscription);\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript,\n\t\t});\n\t\ttotalTsatOut += bigAmt;\n\t}\n\n\tchangeTsats = totalTsatIn - totalTsatOut;\n\t\n\t// check that you have enough tokens to send and return change\n\tif (changeTsats < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tlet tokenChange: TokenUtxo[] = [];\n\tif (changeTsats > 0n) {\n    const tokenChangeAddress = config.tokenChangeAddress || ordPk?.toAddress();\n\t\tif(!tokenChangeAddress) {\n\t\t\tthrow new Error(\"ordPk or changeAddress required for token change\");\n\t\t}\n\t\ttokenChange = splitChangeOutputs(\n\t\t\ttx,\n\t\t\tchangeTsats,\n\t\t\tprotocol,\n\t\t\ttokenID,\n\t\t\ttokenChangeAddress,\n\t\t\tmetaData,\n\t\t\tsplitConfig,\n      \t\tdecimals,\n\t\t);\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// assign txid to tokenChange outputs\n\tconst txid = tx.id(\"hex\") as string;\n\tfor (const change of tokenChange) {\n\t\tchange.txid = txid;\n\t}\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n\nconst splitChangeOutputs = (\n  tx: Transaction,\n  changeTsats: bigint,\n  protocol: TokenType,\n  tokenID: string,\n  tokenChangeAddress: string,\n  metaData: PreMAP | undefined,\n  splitConfig: TokenSplitConfig,\n  decimals: number,\n): TokenUtxo[] => {\n  const tokenChanges: TokenUtxo[] = [];\n\n  const threshold = splitConfig.threshold !== undefined ? toTokenSat(splitConfig.threshold, decimals, ReturnTypes.BigInt) : undefined;\n  const maxOutputs = splitConfig.outputs;\n  const changeAmt = changeTsats;\n  console.log({splitChangeAmt: changeAmt})\n  let splitOutputs: bigint;\n  if (threshold !== undefined && threshold > 0n) {\n      splitOutputs = changeAmt / threshold;\n      splitOutputs = BigInt(Math.min(Number(splitOutputs), maxOutputs));\n  } else {\n      // If no threshold is specified, use maxOutputs directly\n      splitOutputs = BigInt(maxOutputs);\n  }\n  splitOutputs = BigInt(Math.max(Number(splitOutputs), 1));\n\n  const baseChangeAmount = changeAmt / splitOutputs;\n  let remainder = changeAmt % splitOutputs;\n\n  for (let i = 0n; i < splitOutputs; i++) {\n      let splitAmount = baseChangeAmount;\n      if (remainder > 0n) {\n          splitAmount += 1n;\n          remainder -= 1n;\n      }\n\n      const transferInscription: TransferTokenInscription = {\n          p: \"bsv-20\",\n          op: \"transfer\",\n          amt: splitAmount.toString(),\n      };\n      let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n      if (protocol === TokenType.BSV20) {\n          inscription = {\n              ...transferInscription,\n              tick: tokenID,\n          } as TransferBSV20Inscription;\n      } else if (protocol === TokenType.BSV21) {\n          inscription = {\n              ...transferInscription,\n              id: tokenID,\n          } as TransferBSV21Inscription;\n      } else {\n          throw new Error(\"Invalid protocol\");\n      }\n\n      const lockingScript = new OrdP2PKH().lock(\n          tokenChangeAddress,\n          {\n              dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n              contentType: \"application/bsv-20\",\n          },\n          splitConfig.omitMetaData ? undefined : stringifyMetaData(metaData),\n      );\n\n      const vout = tx.outputs.length;\n      tx.addOutput({ lockingScript, satoshis: 1 });\n      tokenChanges.push({\n          id: tokenID,\n          satoshis: 1,\n          script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n          txid: \"\",\n          vout,\n          amt: splitAmount.toString(),\n      });\n  }\n\n  return tokenChanges;\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  type TokenChangeResult,\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { ReturnTypes, toToken, toTokenSat } from \"satoshi-token\";\nconst { toArray } = Utils;\n\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n\n    const ordKeyToUse = listing.listingUtxo.pk || ordPk;\n    if (!ordKeyToUse) {\n      throw new Error(\"Private key is required to sign the ordinal\");\n    }\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordKeyToUse,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n  if(!changeAddress) {\n    throw new Error(\"changeAddress or private key is required\");\n  }\n  const changeScript = new P2PKH().lock(changeAddress);\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n    if (!payKeyToUse) {\n      throw new Error(\"Private key is required to sign the transaction\");\n    }\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      payKeyToUse,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = toTokenSat(listing.tokens, decimals, ReturnTypes.BigInt);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    const ordKeyToUse = token.pk || ordPk;\n    if(!ordKeyToUse) {\n      throw new Error(\"Private key is required to sign the ordinal\");\n    }\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordKeyToUse,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo[] | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = [{\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    }];\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n  if(!changeAddress) {\n    throw new Error(\"Either changeAddress or paymentPk is required\");\n  }\n\n  const changeScript = new P2PKH().lock(changeAddress);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n    if(!payKeyToUse) {\n      throw new Error(\"Private key is required to sign the payment\");\n    }\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      payKeyToUse,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange = tokenChange.map((tc) => ({ ...tc, txid }));\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n  type TokenChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n    const ordKeyToUse = listingUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock((ordKeyToUse).toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst change = changeAddress;\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n * Cancel Ordinal Token Listings\n * @param {CancelOrdTokenListingsConfig} config - Configuration object for cancelling token ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} config.tokenID - Token ID of the token to cancel listings for\n * @param {string} config.ordAddress - Address to send the cancelled token to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<TokenChangeResult>} Transaction, spent outpoints, change utxo, token change utxos\n */\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n    const ordKeyToUse = listingUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n  const ordAddress = config.ordAddress || ordPk?.toAddress();\n\tif(!ordAddress) {\n\t\tthrow new Error(\"ordAddress or ordPk required for token output\");\n\t}\n\tconst destination: Destination = {\n\t\taddress: ordAddress,\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo[] = [{\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  }];\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange,\n\t};\n};","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import { imageMeta } from \"image-meta\";\nimport { Utils } from \"@bsv/sdk\";\nimport type { IconInscription, ImageContentType } from \"../types\";\nconst { toArray } = Utils;\n\nexport const ErrorOversizedIcon = new Error(\n    \"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n    \"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n    return (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n    icon: IconInscription,\n): Promise<Error | null> => {\n    const { dataB64, contentType } = icon;\n\n    if (contentType === \"image/svg+xml\") {\n        return validateSvg(dataB64);\n    }\n\n    if (!isImageContentType(contentType)) {\n        return ErrorInvalidIconData;\n    }\n\n    try {\n        const buffer = Uint8Array.from(toArray(dataB64, \"base64\"));\n\n        // Meta contains { type, width?, height?, orientation? }\n        const dimensions = imageMeta(buffer);\n\n        if (dimensions.width === undefined || dimensions.height === undefined) {\n            return ErrorImageDimensionsUndefined;\n        }\n        if (dimensions.width !== dimensions.height) {\n            return ErrorIconProportions;\n        }\n        if (dimensions.width > 400 || dimensions.height > 400) {\n            return ErrorOversizedIcon;\n        }\n\n        return null;\n    } catch (error) {\n        return ErrorInvalidIconData;\n    }\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n    const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n    const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n    const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n    \n    if (!widthMatch || !heightMatch) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    const width = Number.parseInt(widthMatch[1], 10);\n    const height = Number.parseInt(heightMatch[1], 10);\n\n    if (Number.isNaN(width) || Number.isNaN(height)) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    if (width !== height) {\n        return ErrorIconProportions;\n    }\n    if (width > 400 || height > 400) {\n        return ErrorOversizedIcon;\n    }\n\n    return null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n    if (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n        return false;\n    }\n\n    const iconVout = Number.parseInt(icon.split(\"_\")[1]);\n    if (Number.isNaN(iconVout)) {\n        return false;\n    }\n\n    if (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n        return false;\n    }\n\n    return true;\n};\n\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const tsatAmt = decimals ? BigInt(initialDistribution.tokens) * 10n ** BigInt(decimals) : BigInt(initialDistribution.tokens);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: tsatAmt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData, ordPk } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n    const ordKeyToUse = ordUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the ordinal\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n","\n/** fetch function interface limited to options needed by ts-sdk */\n\nimport type { HttpClient, HttpClientRequestOptions, HttpClientResponse } from \"@bsv/sdk\"\n\n/**\n   * Makes a request to the server.\n   * @param url The URL to make the request to.\n   * @param options The request configuration.\n   */\nexport type Fetch = (url: string, options: FetchOptions) => Promise<Response>\n\n/**\n * An interface for configuration of the request to be passed to the fetch method\n * limited to options needed by ts-sdk.\n */\nexport interface FetchOptions {\n  /** A string to set request's method. */\n  method?: string\n  /** An object literal set request's headers. */\n  headers?: Record<string, string>\n  /** An object or null to set request's body. */\n  body?: string | null\n}\n\n/**\n * Adapter for Node.js Https module to be used as HttpClient\n */\nexport class FetchHttpClient implements HttpClient {\n  constructor (private readonly fetch: Fetch) {}\n\n  async request<D>(url: string, options: HttpClientRequestOptions): Promise<HttpClientResponse<D>> {\n    const fetchOptions: FetchOptions = {\n      method: options.method,\n      headers: options.headers,\n      body: JSON.stringify(options.data)\n    }\n\n    const res = await this.fetch.call(window, url, fetchOptions)\n    const mediaType = res.headers.get('Content-Type')\n    const data = mediaType?.startsWith('application/json') ? await res.json() : await res.text()\n\n    return {\n      ok: res.ok,\n      status: res.status,\n      statusText: res.statusText,\n      data: data as D\n    }\n  }\n}\n","import {\n\ttype BroadcastFailure,\n\ttype Broadcaster,\n\ttype BroadcastResponse,\n\ttype Transaction,\n\ttype HttpClient,\n  Utils,\n} from \"@bsv/sdk\";\nimport { API_HOST } from \"../constants.js\";\nimport { defaultHttpClient } from \"./httpClient.js\";\n\nexport const oneSatBroadcaster = (): Broadcaster => {\n\treturn new OneSatBroadcaster();\n};\n\n/**\n * Represents a 1Sat API transaction broadcaster. This will broadcast through the 1Sat API.\n */\nexport default class OneSatBroadcaster implements Broadcaster {\n\tprivate readonly URL: string;\n\tprivate readonly httpClient: HttpClient;\n\n\t/**\n\t * Constructs an instance of the 1Sat API broadcaster.\n\t *\n\t * @param {HttpClient} httpClient - The HTTP client used to make requests to the API.\n\t */\n\tconstructor(\n\t\thttpClient: HttpClient = defaultHttpClient(),\n\t) {\n\t\tthis.URL = `${API_HOST}/tx`;\n\t\tthis.httpClient = httpClient;\n\t}\n\n\t/**\n\t * Broadcasts a transaction via WhatsOnChain.\n\t *\n\t * @param {Transaction} tx - The transaction to be broadcasted.\n\t * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.\n\t */\n\tasync broadcast(\n\t\ttx: Transaction,\n\t): Promise<BroadcastResponse | BroadcastFailure> {\n\t\tconst rawtx = Utils.toBase64(tx.toBinary());\n\n\t\tconst requestOptions = {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAccept: \"application/json\",\n\t\t\t},\n\t\t\tdata: { rawtx },\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await this.httpClient.request<string>(\n\t\t\t\tthis.URL,\n\t\t\t\trequestOptions,\n\t\t\t);\n\t\t\tif (response.ok) {\n\t\t\t\tconst txid = response.data;\n\t\t\t\treturn {\n\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\ttxid,\n\t\t\t\t\tmessage: \"broadcast successful\",\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tstatus: \"error\",\n\t\t\t\tcode: response.status.toString() ?? \"ERR_UNKNOWN\",\n\t\t\t\tdescription: response.data.message ?? \"Unknown error\",\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tstatus: \"error\",\n\t\t\t\tcode: \"500\",\n\t\t\t\tdescription: error instanceof Error\n\t\t\t\t\t? error.message\n\t\t\t\t\t: \"Internal Server Error\",\n\t\t\t};\n\t\t}\n\t}\n}\n\n","import { type HttpClient, type HttpClientResponse, NodejsHttpClient } from \"@bsv/sdk\"\nimport { FetchHttpClient } from \"./fetch\"\n\nexport function defaultHttpClient (): HttpClient {\n  const noHttpClient: HttpClient = {\n    async request (..._): Promise<HttpClientResponse> {\n      throw new Error('No method available to perform HTTP request')\n    }\n  }\n\n  if (typeof window !== 'undefined' && typeof window.fetch === 'function') {\n    const originalFetch = window.fetch\n\n    window.fetch = async (...args) => {\n      return await originalFetch(...args)\n    }\n\n    // Use fetch in a browser environment\n    return new FetchHttpClient(window.fetch)\n  }\n  if (typeof require !== 'undefined') {\n    // Use Node.js https module\n    try {\n      const https = require('node:https')\n      return new NodejsHttpClient(https)\n    } catch (e) {\n      return noHttpClient\n    }\n  } else {\n    return noHttpClient\n  }\n}\n"],"names":["toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","P2PKH","lock","address","inscription","metaData","lockingScript","applyInscription","withSeparator","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","key","value","Object","entries","LockingScript","fromASM","TokenSelectionStrategy","TokenType","RoytaltyType","TokenInputMode","MAX_TOKEN_SUPPLY","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","async","scriptEncoding","payUrl","console","log","payRes","fetch","ok","payUtxos","json","filter","u","satoshis","isLock","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","fetchNftUtxos","collectionId","limit","offset","url","JSON","stringify","subTypeData","res","nftUtxos","_u$data","list","outpoints","nftRes","method","headers","body","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","selectTokenUtxos","requiredTokens","decimals","options","inputStrategy","RetainOrder","outputStrategy","sortedUtxos","sort","a","b","amtA","BigInt","amtB","SmallestFirst","Number","LargestFirst","Random","Math","random","totalSelected","selectedUtxos","push","toToken","isEnough","signData","tx","signer","idKey","keyHost","sigma","Sigma","signedTx","sign","authToken","remoteSign","e","stringifyMetaData","result","Array","isArray","String","createOrdinals","utxos","destinations","paymentPk","satsPerKb","additionalPayments","config","length","warn","modelOrFee","SatoshisPerKilobyte","payChange","Transaction","destination","keys","addOutput","p","amount","to","changeAddress","toAddress","changeScript","change","totalSatsIn","totalSatsOut","outputs","reduce","total","out","pop","payKeyToUse","pk","addInput","unlock","fromBinary","toArray","fee","input","computeFee","payChangeOutIdx","findIndex","o","changeOutput","spentOutpoints","sendOrdinals","enforceUniformSend","ordPk","ordUtxo","ordinals","ordKeyToUse","_destination$inscript","_destination$inscript2","s","paymentUtxos","sendUtxos","payments","payment","sendTxOut","changeOut","transferOrdTokens","tokenID","inputTokens","distributions","burn","tokenInputMode","Needed","splitConfig","omitMetaData","every","token","changeTsats","totalTsatIn","totalTsatOut","totalAmtNeeded","acc","dist","toTokenSat","tokens","ReturnTypes","tokensToUse","All","inputScriptBinary","inputScript","dest","bigAmt","distTokenSat","transferInscription","op","inscriptionObj","tick","BSV21","tokenChange","tokenChangeAddress","splitChangeOutputs","inputs","i","sourceTXID","sourceOutputIndex","tokenChanges","threshold","maxOutputs","changeAmt","splitOutputs","splitChangeAmt","min","max","baseChangeAmount","remainder","splitAmount","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","values","traits","itemData","includes","split","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","output","slice","write","OP_0","sourceSats","sourceTransaction","subscript","_input$sourceTransact2","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","writeUInt64LEBn","BigNumber","writeVarIntNum","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","totalAmtIn","totalAmtOut","tc","cancelOrdListings","listingUtxos","cancelOrdTokenListings","resolvePaymail","paymailAddress","amtToReceive","purchaseOrdListing","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","r","royaltySats","floor","percentage","Paymail","Address","purchaseOrdTokenListing","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","symbol","icon","initialDistribution","destinationAddress","iconValue","iconError","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Uint8Array","dimensions","imageMeta","validIconData","iconScript","endsWith","iconVout","startsWith","validIconFormat","fileData","sym","dec","b64File","burnOrdinals","metaAsm","FetchHttpClient","constructor","this","request","fetchOptions","call","window","mediaType","get","text","status","statusText","oneSatBroadcaster","OneSatBroadcaster","httpClient","noHttpClient","_","originalFetch","args","require","https","NodejsHttpClient","defaultHttpClient","URL","broadcast","requestOptions","Accept","rawtx","toBase64","_response$status$toSt","_response$data$messag","response","message","code"],"mappings":"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"}