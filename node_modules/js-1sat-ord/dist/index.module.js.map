{"version":3,"file":"index.module.js","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/validate.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/paymail.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/burnOrdinals.ts","../src/utils/fetch.ts","../src/utils/broadcast.ts","../src/utils/httpClient.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} tokens - Number of tokens in whole token display format. Ex. 0.5 for 0.5 tokens. Library handles conversion to 'tsat' format.\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  tokens: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} tokens - Number of tokens in whole token display format. Ex. 0.5 for 0.5 tokens. Library handles conversion to 'tsat' format. \n * @property {boolean} [omitMetaData] - Optional. Set to true to omit metadata from this distribution's output.\n */\nexport type Distribution = {\n  address: string | Script;\n  tokens: number;\n  omitMetaData?: boolean;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n  pk?: PrivateKey;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n  pk?: PrivateKey;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string in 'tsat' format. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n  pk?: PrivateKey;\n}\n\nexport enum TokenSelectionStrategy {\n  SmallestFirst = \"smallest\",\n  LargestFirst = \"largest\",\n  RetainOrder = \"retain\",\n  Random = \"random\",\n}\n\nexport interface TokenSelectionOptions {\n  inputStrategy?: TokenSelectionStrategy;\n  outputStrategy?: TokenSelectionStrategy;\n}\n\nexport interface TokenSelectionResult {\n  selectedUtxos: TokenUtxo[];\n  totalSelected: number;\n  isEnough: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk?: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk?: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk?: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo[];\n}\n\n/**\n * Configuration object for token outputs\n * @typedef {Object} TokenSplitConfig\n * @property {number} outputs - Number of outputs to split the token into. Default is 1.\n * @property {number} threshold - Optional. Minimum amount of tokens per output.\n * @property {boolean} omitMetaData - Set to true to omit metadata from the token change outputs\n **/\nexport type TokenSplitConfig = {\n  outputs: number;\n  threshold?: number;\n  omitMetaData?: boolean;\n}\n\nexport enum TokenInputMode {\n  All = \"all\",\n  Needed = \"needed\",\n}\n\n/**\n * Configuration object for transferring token ordinals\n * @typedef {Object} TransferOrdTokensConfig\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be transferred\n * @property {Distribution[]} distributions - Array of Distribution objects\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} [changeAddress] - Optional. Address to send the change\n * @property {string} [tokenChangeAddress] - Optional. Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {PreMAP} [metaData] - Optional. MAP metadata object\n * @property {LocalSigner | RemoteSigner} [signer] - Optional. Signer object\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {boolean} [burn] - Optional. Set to true to burn the input tokens\n * @property {TokenSplitConfig} [splitConfig] - Optional. Configuration object for splitting token change\n * @property {TokenInputMode} [tokenInputMode] - Optional. Token input mode. Default is \"needed\"\n */\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  inputMode?: TokenInputMode;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n  splitConfig?: TokenSplitConfig;\n  tokenInputMode?: TokenInputMode;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk?: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tinscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\treturn applyInscription(lockingScript, inscription, metaData);\n\t}\n}\n\nexport const applyInscription = (lockingScript: LockingScript, inscription?: Inscription, metaData?: MAP, withSeparator=false) => {\n\tlet ordAsm = \"\";\n\t// This can be omitted for reinscriptions that just update metadata\n\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\tconst ordHex = toHex(\"ord\");\n\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\tif (!fileHex) {\n\t\t\tthrow new Error(\"Invalid file data\");\n\t\t}\n\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\tif (!fileMediaType) {\n\t\t\tthrow new Error(\"Invalid media type\");\n\t\t}\n\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t}\n\n\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ${withSeparator ? 'OP_CODESEPARATOR ' : ''}` : \"\"}${lockingScript.toASM()}`;\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} ` : \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\tvalue as string,\n\t\t\t\t)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn LockingScript.fromASM(inscriptionAsm);\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, type TokenSelectionOptions, type TokenSelectionResult, TokenSelectionStrategy, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\nimport { toToken } from \"satoshi-token\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: Utxo) => u.satoshis !== 1 && !isLock(u));\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @param {number} [limit=10] - Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Offset for fetching utxos. Default is 0\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n  limit = 10,\n  offset = 0,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false&limit=${limit}&offset=${offset}`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n\nconst isLock = (utxo: Utxo) => {\n  return !!(utxo as unknown as { lock: { address: string, until: number } }).lock;\n}\n\n/**\n * Selects token UTXOs based on the required amount and specified strategies.\n * @param {TokenUtxo[]} tokenUtxos - Array of token UTXOs.\n * @param {number} requiredTokens - Required amount in tokens (displayed amount).\n * @param {number} decimals - Number of decimal places for the token.\n * @param {TokenSelectionOptions} [options={}] - Options for token selection.\n * @returns {TokenSelectionResult} Selected token UTXOs and total selected amount.\n */\nexport const selectTokenUtxos = (\n  tokenUtxos: TokenUtxo[],\n  requiredTokens: number,\n  decimals: number,\n  options: TokenSelectionOptions = {}\n): TokenSelectionResult => {\n  const {\n    inputStrategy = TokenSelectionStrategy.RetainOrder,\n    outputStrategy = TokenSelectionStrategy.RetainOrder,\n  } = options;\n  \n  // Sort the UTXOs based on the input strategy\n  const sortedUtxos = [...tokenUtxos].sort((a, b) => {\n    if (inputStrategy === TokenSelectionStrategy.RetainOrder) return 0;\n    const amtA = BigInt(a.amt);\n    const amtB = BigInt(b.amt);\n\n    switch (inputStrategy) {\n      case TokenSelectionStrategy.SmallestFirst:\n        return Number(amtA - amtB);\n      case TokenSelectionStrategy.LargestFirst:\n        return Number(amtB - amtA);\n      case TokenSelectionStrategy.Random:\n        return Math.random() - 0.5;\n      default:\n        return 0;\n    }\n  });\n\n  let totalSelected = 0;\n  const selectedUtxos: TokenUtxo[] = [];\n\n  for (const utxo of sortedUtxos) {\n    selectedUtxos.push(utxo);\n    totalSelected += toToken(utxo.amt, decimals);\n    if (totalSelected >= requiredTokens && requiredTokens > 0) {\n      break;\n    }\n  }\n\n  // Sort the selected UTXOs based on the output strategy\n  if (outputStrategy !== TokenSelectionStrategy.RetainOrder) {\n    selectedUtxos.sort((a, b) => {\n      const amtA = BigInt(a.amt);\n      const amtB = BigInt(b.amt);\n\n      switch (outputStrategy) {\n        case TokenSelectionStrategy.SmallestFirst:\n          return Number(amtA - amtB);\n        case TokenSelectionStrategy.LargestFirst:\n          return Number(amtB - amtA);\n        case TokenSelectionStrategy.Random:\n          return Math.random() - 0.5;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return {\n    selectedUtxos,\n    totalSelected,\n    isEnough: totalSelected >= requiredTokens\n  };\n};","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the transaction\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the transaction\");\n\t\t}\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst {ordPk, paymentPk} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n    const ordKeyToUse = ordUtxo.pk || ordPk;\n\t\tif (!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the ordinal\");\n\t\t}\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordKeyToUse, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} - Returns a ChangeResult: payChange, tx, and spentOutputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the utxos\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse,\n\t\t\t\"all\",\n\t\t\ttrue,\n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n  // Change\n\tlet payChange: Utxo | undefined;\n  // if we need to send change, add it to the outputs\n\tif (totalSatsIn > totalSatsOut + fee) {\n    const changeAddress = config.changeAddress || paymentPk?.toAddress();\n    if(!changeAddress) {\n      throw new Error(\"Either changeAddress or paymentPk is required\");\n    }\n    const changeScript = new P2PKH().lock(changeAddress);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH, { applyInscription } from \"./templates/ordP2pkh\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TokenChangeResult,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tTokenInputMode,\n\ttype TokenSplitConfig,\n\ttype PreMAP,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\nimport { ReturnTypes, toToken, toTokenSat } from \"satoshi-token\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {TokenInputMode} [config.tokenInputMode] - Optional. \"all\" or \"needed\". Default is \"needed\"\n * @param {TokenSplitConfig} [config.tokenSplitConfig] - Optional. Configuration object for splitting token change\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tconfig: TransferOrdTokensConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tdecimals,\n\t\tadditionalPayments = [],\n\t\tburn = false,\n\t\ttokenInputMode = TokenInputMode.Needed,\n\t\tsplitConfig = {\n\t\t\toutputs: 1,\n\t\t\tomitMetaData: false,\n\t\t},\n\t} = config;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeTsats = 0n;\n\tlet totalTsatIn = 0n;\n\tlet totalTsatOut = 0n;\n\tconst totalAmtNeeded = distributions.reduce(\n\t\t(acc, dist) => acc + toTokenSat(dist.tokens, decimals, ReturnTypes.BigInt),\n\t\t0n,\n\t);\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Handle token inputs based on tokenInputMode\n\tlet tokensToUse: TokenUtxo[];\n\tif (tokenInputMode === TokenInputMode.All) {\n\t\ttokensToUse = inputTokens;\n\t\ttotalTsatIn = inputTokens.reduce(\n\t\t\t(acc, token) => acc + BigInt(token.amt),\n\t\t\t0n,\n\t\t);\n\t} else {\n\t\ttokensToUse = [];\n\t\tfor (const token of inputTokens) {\n\t\t\ttokensToUse.push(token);\n\t\t\ttotalTsatIn += BigInt(token.amt);\n\t\t\tif (totalTsatIn >= totalAmtNeeded) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (totalTsatIn < totalAmtNeeded) {\n\t\t\tthrow new Error(\"Not enough tokens to satisfy the transfer amount\");\n\t\t}\n\t}\n\n\tfor (const token of tokensToUse) {\n    const ordKeyToUse = token.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(\n\t\t\tinputFromB64Utxo(\n\t\t\t\ttoken,\n\t\t\t\tnew OrdP2PKH().unlock(ordKeyToUse, \"all\", true, token.satoshis, inputScript),\n\t\t\t),\n\t\t);\n\t}\n\n\t// remove any undefined fields from metadata\n\tif (metaData) {\n\t\tfor (const key of Object.keys(metaData)) {\n\t\t\tif (metaData[key] === undefined) {\n\t\t\t\tdelete metaData[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst bigAmt = toTokenSat(dest.tokens, decimals, ReturnTypes.BigInt);\n    console.log({distTokenSat: bigAmt});\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: bigAmt.toString(),\n\t\t};\n\t\tlet inscriptionObj: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscriptionObj = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscriptionObj = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst inscription = {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscriptionObj)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t}\n\t\tlet lockingScript = typeof dest.address == 'string' ?\n\t\t\tnew OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\tinscription,\n\t\t\t\t// when present, include metadata on each distribution if omit is not specified\n\t\t\t\tdest.omitMetaData ? undefined : stringifyMetaData(metaData),\n\t\t\t) :\n\t\t\tapplyInscription(dest.address, inscription);\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript,\n\t\t});\n\t\ttotalTsatOut += bigAmt;\n\t}\n\n\tchangeTsats = totalTsatIn - totalTsatOut;\n\t\n\t// check that you have enough tokens to send and return change\n\tif (changeTsats < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tlet tokenChange: TokenUtxo[] = [];\n\tif (changeTsats > 0n) {\n    const tokenChangeAddress = config.tokenChangeAddress || ordPk?.toAddress();\n\t\tif(!tokenChangeAddress) {\n\t\t\tthrow new Error(\"ordPk or changeAddress required for token change\");\n\t\t}\n\t\ttokenChange = splitChangeOutputs(\n\t\t\ttx,\n\t\t\tchangeTsats,\n\t\t\tprotocol,\n\t\t\ttokenID,\n\t\t\ttokenChangeAddress,\n\t\t\tmetaData,\n\t\t\tsplitConfig,\n      \t\tdecimals,\n\t\t);\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// assign txid to tokenChange outputs\n\tconst txid = tx.id(\"hex\") as string;\n\tfor (const change of tokenChange) {\n\t\tchange.txid = txid;\n\t}\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n\nconst splitChangeOutputs = (\n  tx: Transaction,\n  changeTsats: bigint,\n  protocol: TokenType,\n  tokenID: string,\n  tokenChangeAddress: string,\n  metaData: PreMAP | undefined,\n  splitConfig: TokenSplitConfig,\n  decimals: number,\n): TokenUtxo[] => {\n  const tokenChanges: TokenUtxo[] = [];\n\n  const threshold = splitConfig.threshold !== undefined ? toTokenSat(splitConfig.threshold, decimals, ReturnTypes.BigInt) : undefined;\n  const maxOutputs = splitConfig.outputs;\n  const changeAmt = changeTsats;\n  console.log({splitChangeAmt: changeAmt})\n  let splitOutputs: bigint;\n  if (threshold !== undefined && threshold > 0n) {\n      splitOutputs = changeAmt / threshold;\n      splitOutputs = BigInt(Math.min(Number(splitOutputs), maxOutputs));\n  } else {\n      // If no threshold is specified, use maxOutputs directly\n      splitOutputs = BigInt(maxOutputs);\n  }\n  splitOutputs = BigInt(Math.max(Number(splitOutputs), 1));\n\n  const baseChangeAmount = changeAmt / splitOutputs;\n  let remainder = changeAmt % splitOutputs;\n\n  for (let i = 0n; i < splitOutputs; i++) {\n      let splitAmount = baseChangeAmount;\n      if (remainder > 0n) {\n          splitAmount += 1n;\n          remainder -= 1n;\n      }\n\n      const transferInscription: TransferTokenInscription = {\n          p: \"bsv-20\",\n          op: \"transfer\",\n          amt: splitAmount.toString(),\n      };\n      let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n      if (protocol === TokenType.BSV20) {\n          inscription = {\n              ...transferInscription,\n              tick: tokenID,\n          } as TransferBSV20Inscription;\n      } else if (protocol === TokenType.BSV21) {\n          inscription = {\n              ...transferInscription,\n              id: tokenID,\n          } as TransferBSV21Inscription;\n      } else {\n          throw new Error(\"Invalid protocol\");\n      }\n\n      const lockingScript = new OrdP2PKH().lock(\n          tokenChangeAddress,\n          {\n              dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n              contentType: \"application/bsv-20\",\n          },\n          splitConfig.omitMetaData ? undefined : stringifyMetaData(metaData),\n      );\n\n      const vout = tx.outputs.length;\n      tx.addOutput({ lockingScript, satoshis: 1 });\n      tokenChanges.push({\n          id: tokenID,\n          satoshis: 1,\n          script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n          txid: \"\",\n          vout,\n          amt: splitAmount.toString(),\n      });\n  }\n\n  return tokenChanges;\n};","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  type TokenChangeResult,\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { ReturnTypes, toToken, toTokenSat } from \"satoshi-token\";\nconst { toArray } = Utils;\n\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n\n    const ordKeyToUse = listing.listingUtxo.pk || ordPk;\n    if (!ordKeyToUse) {\n      throw new Error(\"Private key is required to sign the ordinal\");\n    }\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordKeyToUse,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n  if(!changeAddress) {\n    throw new Error(\"changeAddress or private key is required\");\n  }\n  const changeScript = new P2PKH().lock(changeAddress);\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n    if (!payKeyToUse) {\n      throw new Error(\"Private key is required to sign the transaction\");\n    }\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      payKeyToUse,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = toTokenSat(listing.tokens, decimals, ReturnTypes.BigInt);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    const ordKeyToUse = token.pk || ordPk;\n    if(!ordKeyToUse) {\n      throw new Error(\"Private key is required to sign the ordinal\");\n    }\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordKeyToUse,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo[] | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = [{\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    }];\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n  if(!changeAddress) {\n    throw new Error(\"Either changeAddress or paymentPk is required\");\n  }\n\n  const changeScript = new P2PKH().lock(changeAddress);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n    if(!payKeyToUse) {\n      throw new Error(\"Private key is required to sign the payment\");\n    }\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      payKeyToUse,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange = tokenChange.map((tc) => ({ ...tc, txid }));\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n  type TokenChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n    const ordKeyToUse = listingUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock((ordKeyToUse).toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst change = changeAddress;\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n * Cancel Ordinal Token Listings\n * @param {CancelOrdTokenListingsConfig} config - Configuration object for cancelling token ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} config.tokenID - Token ID of the token to cancel listings for\n * @param {string} config.ordAddress - Address to send the cancelled token to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<TokenChangeResult>} Transaction, spent outpoints, change utxo, token change utxos\n */\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n    const ordKeyToUse = listingUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n  const ordAddress = config.ordAddress || ordPk?.toAddress();\n\tif(!ordAddress) {\n\t\tthrow new Error(\"ordAddress or ordPk required for token output\");\n\t}\n\tconst destination: Destination = {\n\t\taddress: ordAddress,\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo[] = [{\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  }];\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange,\n\t};\n};","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import { imageMeta } from \"image-meta\";\nimport { Utils } from \"@bsv/sdk\";\nimport type { IconInscription, ImageContentType } from \"../types\";\nconst { toArray } = Utils;\n\nexport const ErrorOversizedIcon = new Error(\n    \"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n    \"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n    return (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n    icon: IconInscription,\n): Promise<Error | null> => {\n    const { dataB64, contentType } = icon;\n\n    if (contentType === \"image/svg+xml\") {\n        return validateSvg(dataB64);\n    }\n\n    if (!isImageContentType(contentType)) {\n        return ErrorInvalidIconData;\n    }\n\n    try {\n        const buffer = Uint8Array.from(toArray(dataB64, \"base64\"));\n\n        // Meta contains { type, width?, height?, orientation? }\n        const dimensions = imageMeta(buffer);\n\n        if (dimensions.width === undefined || dimensions.height === undefined) {\n            return ErrorImageDimensionsUndefined;\n        }\n        if (dimensions.width !== dimensions.height) {\n            return ErrorIconProportions;\n        }\n        if (dimensions.width > 400 || dimensions.height > 400) {\n            return ErrorOversizedIcon;\n        }\n\n        return null;\n    } catch (error) {\n        return ErrorInvalidIconData;\n    }\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n    const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n    const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n    const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n    \n    if (!widthMatch || !heightMatch) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    const width = Number.parseInt(widthMatch[1], 10);\n    const height = Number.parseInt(heightMatch[1], 10);\n\n    if (Number.isNaN(width) || Number.isNaN(height)) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    if (width !== height) {\n        return ErrorIconProportions;\n    }\n    if (width > 400 || height > 400) {\n        return ErrorOversizedIcon;\n    }\n\n    return null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n    if (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n        return false;\n    }\n\n    const iconVout = Number.parseInt(icon.split(\"_\")[1]);\n    if (Number.isNaN(iconVout)) {\n        return false;\n    }\n\n    if (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n        return false;\n    }\n\n    return true;\n};\n\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const tsatAmt = decimals ? BigInt(initialDistribution.tokens) * 10n ** BigInt(decimals) : BigInt(initialDistribution.tokens);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: tsatAmt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData, ordPk } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n    const ordKeyToUse = ordUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the ordinal\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n","\n/** fetch function interface limited to options needed by ts-sdk */\n\nimport type { HttpClient, HttpClientRequestOptions, HttpClientResponse } from \"@bsv/sdk\"\n\n/**\n   * Makes a request to the server.\n   * @param url The URL to make the request to.\n   * @param options The request configuration.\n   */\nexport type Fetch = (url: string, options: FetchOptions) => Promise<Response>\n\n/**\n * An interface for configuration of the request to be passed to the fetch method\n * limited to options needed by ts-sdk.\n */\nexport interface FetchOptions {\n  /** A string to set request's method. */\n  method?: string\n  /** An object literal set request's headers. */\n  headers?: Record<string, string>\n  /** An object or null to set request's body. */\n  body?: string | null\n}\n\n/**\n * Adapter for Node.js Https module to be used as HttpClient\n */\nexport class FetchHttpClient implements HttpClient {\n  constructor (private readonly fetch: Fetch) {}\n\n  async request<D>(url: string, options: HttpClientRequestOptions): Promise<HttpClientResponse<D>> {\n    const fetchOptions: FetchOptions = {\n      method: options.method,\n      headers: options.headers,\n      body: JSON.stringify(options.data)\n    }\n\n    const res = await this.fetch.call(window, url, fetchOptions)\n    const mediaType = res.headers.get('Content-Type')\n    const data = mediaType?.startsWith('application/json') ? await res.json() : await res.text()\n\n    return {\n      ok: res.ok,\n      status: res.status,\n      statusText: res.statusText,\n      data: data as D\n    }\n  }\n}\n","import {\n\ttype BroadcastFailure,\n\ttype Broadcaster,\n\ttype BroadcastResponse,\n\ttype Transaction,\n\ttype HttpClient,\n  Utils,\n} from \"@bsv/sdk\";\nimport { API_HOST } from \"../constants.js\";\nimport { defaultHttpClient } from \"./httpClient.js\";\n\nexport const oneSatBroadcaster = (): Broadcaster => {\n\treturn new OneSatBroadcaster();\n};\n\n/**\n * Represents a 1Sat API transaction broadcaster. This will broadcast through the 1Sat API.\n */\nexport default class OneSatBroadcaster implements Broadcaster {\n\tprivate readonly URL: string;\n\tprivate readonly httpClient: HttpClient;\n\n\t/**\n\t * Constructs an instance of the 1Sat API broadcaster.\n\t *\n\t * @param {HttpClient} httpClient - The HTTP client used to make requests to the API.\n\t */\n\tconstructor(\n\t\thttpClient: HttpClient = defaultHttpClient(),\n\t) {\n\t\tthis.URL = `${API_HOST}/tx`;\n\t\tthis.httpClient = httpClient;\n\t}\n\n\t/**\n\t * Broadcasts a transaction via WhatsOnChain.\n\t *\n\t * @param {Transaction} tx - The transaction to be broadcasted.\n\t * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.\n\t */\n\tasync broadcast(\n\t\ttx: Transaction,\n\t): Promise<BroadcastResponse | BroadcastFailure> {\n\t\tconst rawtx = Utils.toBase64(tx.toBinary());\n\n\t\tconst requestOptions = {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAccept: \"application/json\",\n\t\t\t},\n\t\t\tdata: { rawtx },\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await this.httpClient.request<string>(\n\t\t\t\tthis.URL,\n\t\t\t\trequestOptions,\n\t\t\t);\n\t\t\tif (response.ok) {\n\t\t\t\tconst txid = response.data;\n\t\t\t\treturn {\n\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\ttxid,\n\t\t\t\t\tmessage: \"broadcast successful\",\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tstatus: \"error\",\n\t\t\t\tcode: response.status.toString() ?? \"ERR_UNKNOWN\",\n\t\t\t\tdescription: response.data.message ?? \"Unknown error\",\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tstatus: \"error\",\n\t\t\t\tcode: \"500\",\n\t\t\t\tdescription: error instanceof Error\n\t\t\t\t\t? error.message\n\t\t\t\t\t: \"Internal Server Error\",\n\t\t\t};\n\t\t}\n\t}\n}\n\n","import { type HttpClient, type HttpClientResponse, NodejsHttpClient } from \"@bsv/sdk\"\nimport { FetchHttpClient } from \"./fetch\"\n\nexport function defaultHttpClient (): HttpClient {\n  const noHttpClient: HttpClient = {\n    async request (..._): Promise<HttpClientResponse> {\n      throw new Error('No method available to perform HTTP request')\n    }\n  }\n\n  if (typeof window !== 'undefined' && typeof window.fetch === 'function') {\n    const originalFetch = window.fetch\n\n    window.fetch = async (...args) => {\n      return await originalFetch(...args)\n    }\n\n    // Use fetch in a browser environment\n    return new FetchHttpClient(window.fetch)\n  }\n  if (typeof require !== 'undefined') {\n    // Use Node.js https module\n    try {\n      const https = require('node:https')\n      return new NodejsHttpClient(https)\n    } catch (e) {\n      return noHttpClient\n    }\n  } else {\n    return noHttpClient\n  }\n}\n"],"names":["TokenSelectionStrategy","TokenType","RoytaltyType","TokenInputMode","toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","this","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","lockingScript","P2PKH","applyInscription","withSeparator","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","fetchPayUtxos","scriptEncoding","payUrl","console","log","Promise","resolve","fetch","then","payRes","ok","json","payUtxos","filter","u","satoshis","isLock","pubKeyHash","p2pkhScript","data","map","txid","vout","toBinary","e","reject","fetchNftUtxos","collectionId","limit","offset","url","b64Query","JSON","stringify","subTypeData","res","nftUtxos","outpoints","_u$data","list","method","headers","body","concat","nftRes","nfts","Script","fromHex","nftUtxo","origin","outpoint","fetchTokenUtxos","protocol","tokenId","BSV20","tokenUtxos","amt","id","selectTokenUtxos","requiredTokens","decimals","options","_step","_options$inputStrateg","inputStrategy","RetainOrder","_options$outputStrate","outputStrategy","totalSelected","selectedUtxos","_iterator","_createForOfIteratorHelperLoose","sort","a","b","amtA","BigInt","amtB","SmallestFirst","Number","LargestFirst","Random","random","done","push","toToken","isEnough","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","signedTx","_temp","authToken","sigma","remoteSign","_ref","_catch","stringifyMetaData","result","Array","isArray","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","_this","onRejected","_isSettledPact","thenable","createOrdinals","config","_temp4","_interrupt","_result2","totalSatsIn","totalSatsOut","fee","modelOrFee","payChangeOutIdx","outputs","findIndex","change","changeOutput","payChange","spentOutpoints","utxos","array","check","_cycle","i","_forOf","payKeyToUse","pk","paymentPk","input","unlock","fromBinary","toArray","addInput","computeFee","_modelOrFee$computeFe","_exit2","destinations","_config$satsPerKb","satsPerKb","_config$additionalPay","additionalPayments","warn","SatoshisPerKilobyte","Transaction","destination","_Object$keys","keys","addOutput","_step2","_iterator2","p","amount","to","changeAddress","toAddress","changeScript","reduce","total","out","_temp3","pop","_signData","sendOrdinals","enforceUniformSend","ordPk","ordinals","ordUtxo","ordKeyToUse","_destination$inscript","_destination$inscript2","_iterator3","_step3","paymentUtxos","sendUtxos","changeOut","payments","payment","sendTxOut","_iteratorSymbol","Symbol","iterator","callback","transferOrdTokens","tokenChange","inputs","sourceTXID","sourceOutputIndex","tokenID","inputTokens","distributions","_config$burn","burn","_config$tokenInputMod","tokenInputMode","Needed","_config$splitConfig","splitConfig","omitMetaData","every","token","changeTsats","tokensToUse","totalTsatIn","totalTsatOut","totalAmtNeeded","acc","dist","toTokenSat","tokens","ReturnTypes","All","inputScriptBinary","inputScript","_step4","_iterator4","dest","bigAmt","distTokenSat","transferInscription","op","inscriptionObj","tick","BSV21","tokenChangeAddress","splitChangeOutputs","_iterator5","_step5","target","step","next","_fixup","TypeError","values","_forTo","splitOutputs","tokenChanges","threshold","maxOutputs","changeAmt","splitChangeAmt","min","baseChangeAmount","max","remainder","splitAmount","validateSubTypeData","subType","collectionData","description","quantity","rarityLabels","label","traits","itemData","includes","split","isNaN","parseInt","mintNumber","rank","rarityLabel","attachments","error","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","payPkh","writeScript","writeBin","buildOutput","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","UnlockingScript","writer","Writer","slice","output","write","OP_0","sourceSats","sourceTransaction","_input$sourceTransact2","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","return","createOrdListings","listings","listing","listingUtxo","createOrdTokenListings","_interrupt2","tc","_config$additionalPay2","_config$satsPerKb2","totalAmtIn","totalAmtOut","_modelOrFee$computeFe2","cancelOrdListings","listingUtxos","cancelOrdTokenListings","purchaseOrdListing","_temp6","_result3","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","_temp5","r","royaltySats","floor","percentage","_switch","Paymail","resolvePaymail","_resolvePaymail","Address","purchaseOrdTokenListing","_temp8","_interrupt3","_result4","_temp7","_exit3","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","deployBsv21Token","iconValue","icon","endsWith","iconVout","startsWith","validIconFormat","tsatAmt","initialDistribution","fileData","sym","symbol","dec","b64File","destinationAddress","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Uint8Array","dimensions","imageMeta","validIconData","iconError","iconScript","burnOrdinals","metaAsm","mapPrefixHex","FetchHttpClient","request","fetchOptions","call","window","mediaType","get","text","status","statusText","oneSatBroadcaster","OneSatBroadcaster","httpClient","noHttpClient","originalFetch","require","https","NodejsHttpClient","defaultHttpClient","URL","broadcast","requestOptions","Accept","rawtx","toBase64","response","_response$status$toSt","_response$data$messag","message","code"],"mappings":"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"}