{"version":3,"file":"index.cjs","sources":["../src/utils/strings.ts","../src/types.ts","../src/constants.ts","../src/templates/ordP2pkh.ts","../src/utils/utxo.ts","../src/signData.ts","../src/utils/subtypeData.ts","../src/createOrdinals.ts","../src/sendOrdinals.ts","../src/sendUtxos.ts","../src/transferOrdinals.ts","../src/templates/ordLock.ts","../src/createListings.ts","../src/cancelListings.ts","../src/purchaseOrdListing.ts","../src/utils/icon.ts","../src/deployBsv21.ts","../src/utils/fetch.ts","../src/utils/broadcast.ts","../src/utils/httpClient.ts","../src/burnOrdinals.ts","../src/utils/paymail.ts","../src/validate.ts"],"sourcesContent":["/**\n * Converts a string to its hexadecimal representation\n *\n * @param {string} utf8Str - The string to convert\n * @returns {string} The hexadecimal representation of the input string\n */\nconst toHex = (utf8Str: string): string => {\n  return Buffer.from(utf8Str).toString(\"hex\");\n};\n\nexport { toHex };\n","import type { PrivateKey, Script, Transaction } from \"@bsv/sdk\";\nimport type { AuthToken } from \"sigma-protocol\";\n\n// biome-ignore lint/complexity/noBannedTypes: Reserved for future use\ntype Signer = {};\n\nexport interface LocalSigner extends Signer {\n  idKey: PrivateKey;\n}\n\nexport interface RemoteSigner extends Signer {\n  keyHost: string;\n  authToken?: AuthToken;\n}\n\nexport type Destination = {\n  address: string;\n  inscription?: Inscription;\n};\n\n/**\n * @typedef {Object} Listing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type NewListing = {\n  payAddress: string;\n  price: number;\n  ordAddress: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} ExistingListing\n * @property {string} payout - Payment output script base64 encoded\n * @property {Utxo} listingUtxo - Utxo of the listing\n */\nexport type ExistingListing = {\n  payout: string;\n  listingUtxo: Utxo;\n}\n\n/**\n * @typedef {Object} NewTokenListing\n * @property {string} payAddress - Address to send the payment upon purchase\n * @property {string} price - Listing price in satoshis\n * @property {String} ordAddress - Where to return a listed ordinal upon cancel.\n * @property {number} tokens - Number of tokens in whole token display format. Ex. 0.5 for 0.5 tokens. Library handles conversion to 'tsat' format.\n */\nexport type NewTokenListing = {\n  payAddress: string;\n  price: number;\n  tokens: number;\n  ordAddress: string;\n}\n\n/**\n * @typedef {Object} Distribution\n * @property {string} address - Destination address. Must be a Ordinals address (BSV address for recieving 1Sat ordinals tokens).\n * @property {number} tokens - Number of tokens in whole token display format. Ex. 0.5 for 0.5 tokens. Library handles conversion to 'tsat' format. \n * @property {boolean} [omitMetaData] - Optional. Set to true to omit metadata from this distribution's output.\n */\nexport type Distribution = {\n  address: string | Script;\n  tokens: number;\n  omitMetaData?: boolean;\n};\n\n/**\n * @typedef {Object} Utxo\n * @property {number} satoshis - Amount in satoshis\n * @property {string} txid - Transaction id\n * @property {number} vout - Output index\n * @property {string} script - Base64 encoded locking script\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport type Utxo = {\n  satoshis: number;\n  txid: string;\n  vout: number;\n  script: string;\n  pk?: PrivateKey;\n};\n\n/**\n * @typedef {Object} NftUtxo\n * @property {string} collectionId - Optional. Collection id of the NFT\n * @property {string} contentType - Media type of the NFT\n * @property {string} creatorBapId - Optional. Creator BAP id of the NFT\n * @property {string} origin - Origin address of the NFT\n * @property {number} satoshis - Always 1\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport interface NftUtxo extends Utxo {\n  collectionId?: string;\n  contentType: string;\n  creatorBapId?: string;\n  origin: string;\n  satoshis: 1;\n  pk?: PrivateKey;\n}\n\n/**\n * @typedef {Object} TokenUtxo\n * @property {string} amt - Number of tokens as a string in 'tsat' format. Ex. 100000000 for 1 token with 8 decimal places.\n * @property {string} id - Token id -  either tick or id depending on protocol\n * @property {string} satoshis - Always 1\n * @property {string} [payout] - Optional. Payment output script base64 encoded\n * @property {number} [price] - Optional. Listing price in satoshis\n * @property {boolean} [isListing] - Optional. True if the token is a listing\n * @property {PrivateKey} [pk] - Optional. Private key for unlocking this utxo\n */\nexport interface TokenUtxo extends Utxo {\n  amt: string;\n  id: string;\n  satoshis: 1;\n  payout?: string;\n  price?: number;\n  isListing?: boolean;\n  pk?: PrivateKey;\n}\n\nexport enum TokenSelectionStrategy {\n  SmallestFirst = \"smallest\",\n  LargestFirst = \"largest\",\n  RetainOrder = \"retain\",\n  Random = \"random\",\n}\n\nexport interface TokenSelectionOptions {\n  inputStrategy?: TokenSelectionStrategy;\n  outputStrategy?: TokenSelectionStrategy;\n}\n\nexport interface TokenSelectionResult {\n  selectedUtxos: TokenUtxo[];\n  totalSelected: number;\n  isEnough: boolean;\n}\n\nexport type Inscription = {\n  dataB64: string;\n  contentType: string;\n};\n\nexport type ImageContentType =\n  | \"image/png\"\n  | \"image/jpeg\"\n  | \"image/gif\"\n  | \"image/svg+xml\"\n  | \"image/webp\";\n\n/**\n * @typedef {Object} IconInscription\n * @property {string} dataB64 - Base64 encoded image data. Must be a square image.\n * @property {ImageContentType} contentType - Media type of the image\n */\nexport type IconInscription = {\n  dataB64: string;\n  contentType: ImageContentType;\n};\n\nexport type Payment = {\n  to: string;\n  amount: number;\n};\n\nexport type TokenInscription = {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"mint\" | \"deploy+mint\" | \"burn\";\n  dec?: string;\n};\n\nexport interface MintTokenInscription extends TokenInscription {\n  op: \"mint\";\n}\n\nexport interface DeployMintTokenInscription extends TokenInscription {\n  op: \"deploy+mint\";\n  sym: string;\n  icon: string;\n}\n\nexport interface TransferTokenInscription extends TokenInscription {\n  p: \"bsv-20\";\n  amt: string;\n  op: \"transfer\" | \"burn\";\n}\n\nexport interface TransferBSV20Inscription extends TransferTokenInscription {\n  tick: string;\n}\n\nexport interface TransferBSV21Inscription extends TransferTokenInscription {\n  id: string;\n}\n\nexport enum TokenType {\n  BSV20 = \"bsv20\",\n  BSV21 = \"bsv21\",\n}\n\nexport type BaseResult = {\n  tx: Transaction;\n  spentOutpoints: string[];\n};\n\nexport interface ChangeResult extends BaseResult {\n  payChange?: Utxo;\n};\n\n/**\n * MAP (Magic Attribute Protocol) metadata object with stringified values for writing to the blockchain\n * @typedef {Object} MAP\n * @property {string} app - Application identifier\n * @property {string} type - Metadata type\n * @property {string} [prop] - Optional. Additional metadata properties\n */\nexport type MAP = {\n  app: string;\n  type: string;\n  [prop: string]: string;\n};\n\nexport type PreMAP = {\n  app: string;\n  type: string;\n  [prop: string]: unknown;\n  royalties?: Royalty[];\n  subTypeData?: CollectionSubTypeData | CollectionItemSubTypeData;\n};\n\nexport type CreateOrdinalsConfig = {\n  utxos: Utxo[];\n  destinations: Destination[];\n  paymentPk?: PrivateKey;\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n};\n\nexport enum RoytaltyType {\n  Paymail = \"paymail\",\n  Address = \"address\",\n  Script = \"script\",\n}\n\n/**\n * Royalty object\n * @typedef {Object} Royalty\n * @property {RoytaltyType} type - Royalty type, string, one of \"paymail\", \"address\", \"script\"\n * @property {string} destination - Royalty destination\n * @property {string} percentage - Royalty percentage as a string float 0-1 (0.01 = 1%)\n */\nexport type Royalty = {\n  type: RoytaltyType;\n  destination: string;\n  percentage: string; // string float 0-1\n};\n\nexport interface CreateOrdinalsMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  previewUrl?: string,\n}\n\nexport interface CreateOrdinalsCollectionMetadata extends CreateOrdinalsMetadata {\n  subType: \"collection\",\n  subTypeData: CollectionSubTypeData, // JSON stringified CollectionSubTypeData\n  royalties?: Royalty[],\n};\n\nexport interface CreateOrdinalsCollectionItemMetadata extends CreateOrdinalsMetadata {\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n};\n\n/**\n * Configuration object for creating an ordinals collection\n * @typedef {Object} CreateOrdinalsCollectionConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collection\"\n * @property metaData.name - Collection name\n * @property metaData.subTypeData - JSON stringified CollectionSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionMetadata\n}\n\nexport type CollectionTraits = {\n  [trait: string]: CollectionTrait;\n};\n\nexport type CollectionTrait = {\n  values: string[];\n  occurancePercentages: string[];\n};\n\nexport type Rarity = {\n  [key: string]: string;\n}\n\nexport type RarityLabels = Rarity[]\nexport interface CollectionSubTypeData {\n  description: string;\n  quantity: number;\n  rarityLabels: RarityLabels;\n  traits: CollectionTraits;\n}\n\nexport interface CreateOrdinalsCollectionItemMetadata extends PreMAP {\n  type: \"ord\",\n  name: string,\n  subType: \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData, // JSON stringified CollectionItemSubTypeData\n  previewUrl?: string,\n}\n\n/**\n * Configuration object for creating an ordinals collection item\n * @typedef {Object} CreateOrdinalsCollectionItemConfig\n * @property metaData - MAP (Magic Attribute Protocol) metadata for the collection item\n * @property metaData.type - \"ord\"\n * @property metaData.subType - \"collectionItem\"\n * @property metaData.name - Collection item name\n * @property metaData.subTypeData - JSON stringified CollectionItemSubTypeData\n * @property [metaData.royalties] - Optional. Royalties address\n * @property [metaData.previewUrl] - Optional. Preview URL\n */\nexport interface CreateOrdinalsCollectionItemConfig extends CreateOrdinalsConfig {\n  metaData: CreateOrdinalsCollectionItemMetadata\n}\n\n/**\n * Subtype data for an ordinals collection item\n * @typedef {Object} CollectionItemSubTypeData\n * @property {string} collectionId - Collection id\n * @property {number} mintNumner - Mint number\n * @property {number} rank - Rank\n * @property {string} rarityLabel - Rarity label\n * @property {string} traits - traits object\n * @property {string} attachments - array of attachment objects\n */\nexport interface CollectionItemSubTypeData {\n  collectionId: string;\n  mintNumber?: number;\n  rank?: number;\n  rarityLabel?: RarityLabels;\n  traits?: CollectionItemTrait[];\n  attachments?: CollectionItemAttachment[];\n}\n\nexport type CollectionItemTrait = {\n  name: string;\n  value: string;\n  rarityLabel?: string;\n  occurancePercentrage?: string;\n};\n\nexport type CollectionItemAttachment = {\n  name: string;\n  description?: string;\n  \"content-type\": string;\n  url: string;\n}\n\nexport interface BurnMAP extends MAP {\n  type: \"ord\";\n  op: \"burn\";\n}\n\nexport type BurnOrdinalsConfig = {\n  ordPk?: PrivateKey;\n  ordinals: Utxo[];\n  metaData?: BurnMAP;\n}\n\nexport type SendOrdinalsConfig = {\n  paymentUtxos: Utxo[];\n  ordinals: Utxo[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  destinations: Destination[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  enforceUniformSend?: boolean;\n}\n\nexport type DeployBsv21TokenConfig = {\n  symbol: string;\n  decimals?: number;\n  icon: string | IconInscription;\n  utxos: Utxo[];\n  initialDistribution: Distribution;\n  paymentPk?: PrivateKey;\n  destinationAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n};\n\nexport type SendUtxosConfig = {\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  payments: Payment[];\n  satsPerKb?: number;\n  changeAddress?: string;\n  metaData?: MAP;\n};\n\nexport interface TokenChangeResult extends ChangeResult {\n  tokenChange?: TokenUtxo[];\n}\n\n/**\n * Configuration object for token outputs\n * @typedef {Object} TokenSplitConfig\n * @property {number} outputs - Number of outputs to split the token into. Default is 1.\n * @property {number} threshold - Optional. Minimum amount of tokens per output.\n * @property {boolean} omitMetaData - Set to true to omit metadata from the token change outputs\n **/\nexport type TokenSplitConfig = {\n  outputs: number;\n  threshold?: number;\n  omitMetaData?: boolean;\n}\n\nexport enum TokenInputMode {\n  All = \"all\",\n  Needed = \"needed\",\n}\n\n/**\n * Configuration object for transferring token ordinals\n * @typedef {Object} TransferOrdTokensConfig\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be transferred\n * @property {Distribution[]} distributions - Array of Distribution objects\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} [changeAddress] - Optional. Address to send the change\n * @property {string} [tokenChangeAddress] - Optional. Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {PreMAP} [metaData] - Optional. MAP metadata object\n * @property {LocalSigner | RemoteSigner} [signer] - Optional. Signer object\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {boolean} [burn] - Optional. Set to true to burn the input tokens\n * @property {TokenSplitConfig} [splitConfig] - Optional. Configuration object for splitting token change\n * @property {TokenInputMode} [tokenInputMode] - Optional. Token input mode. Default is \"needed\"\n */\nexport type TransferOrdTokensConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  utxos: Utxo[];\n  inputTokens: TokenUtxo[];\n  distributions: Distribution[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  inputMode?: TokenInputMode;\n  changeAddress?: string;\n  tokenChangeAddress?: string;\n  satsPerKb?: number;\n  metaData?: PreMAP;\n  signer?: LocalSigner | RemoteSigner;\n  additionalPayments?: Payment[];\n  burn?: boolean;\n  splitConfig?: TokenSplitConfig;\n  tokenInputMode?: TokenInputMode;\n}\n\nexport type CreateOrdListingsConfig = {\n  utxos: Utxo[];\n  listings: NewListing[];\n  paymentPk?: PrivateKey;\n  ordPk: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n}\n\nexport type PurchaseOrdListingConfig = {\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  listing: ExistingListing;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  royalties?: Royalty[],\n  metaData?: MAP,\n}\n\nexport type PurchaseOrdTokenListingConfig = {\n  protocol: TokenType;\n  tokenID: string;\n  utxos: Utxo[];\n  paymentPk?: PrivateKey;\n  listingUtxo: TokenUtxo;\n  ordAddress: string;\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[],\n  metaData?: MAP,\n}\n\nexport type CancelOrdListingsConfig = {\n  utxos: Utxo[],\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  listingUtxos: Utxo[];\n  additionalPayments?: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n}\n\nexport interface CancelOrdTokenListingsConfig extends CancelOrdListingsConfig {\n  utxos: Utxo[],\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey;\n  listingUtxos: TokenUtxo[];\n  additionalPayments: Payment[];\n  changeAddress?: string;\n  satsPerKb?: number;\n  protocol: TokenType,\n  tokenID: string;\n  ordAddress?: string;\n}\n\n/**\n * Configuration object for creating a token listing\n * @typedef {Object} CreateOrdTokenListingsConfig\n * @property {Utxo[]} utxos - Array of payment Utxos\n * @property {TokenUtxo[]} inputTokens - Array of TokenUtxos to be listed\n * @property {NewTokenListing[]} listings - Array of NewTokenListings\n * @property {PrivateKey} paymentPk - Private key of the payment address\n * @property {PrivateKey} ordPk - Private key of the ord address\n * @property {string} tokenChangeAddress - Address to send the token change\n * @property {number} [satsPerKb] - Optional. Satoshis per kilobyte\n * @property {Payment[]} [additionalPayments] - Optional. Array of additional payments\n * @property {TokenType} protocol - Token protocol\n * @property {string} tokenID - Token id\n * @property {number} decimals - Number of decimal places for this token.\n */\nexport interface CreateOrdTokenListingsConfig {\n  utxos: Utxo[];\n  listings: NewTokenListing[];\n  paymentPk?: PrivateKey;\n  ordPk?: PrivateKey,\n  changeAddress?: string;\n  satsPerKb?: number;\n  additionalPayments?: Payment[];\n  protocol: TokenType;\n  tokenID: string;\n  decimals: number;\n  inputTokens: TokenUtxo[];\n  tokenChangeAddress: string;\n}\n\nexport const MAX_TOKEN_SUPPLY = 2n ** 64n - 1n;","export const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const DEFAULT_SAT_PER_KB = 10;\nexport const API_HOST = \"https://ordinals.gorillapool.io/api\";","import {\n\tLockingScript,\n\tP2PKH,\n\ttype Script,\n} from \"@bsv/sdk\";\nimport type { Inscription, MAP } from \"../types\";\nimport { toHex } from \"../utils/strings\";\nimport { MAP_PREFIX } from \"../constants\";\n\n/**\n * OrdP2PKH (1Sat Ordinal + Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create an Ordinal with Pay To Public Key Hash locking and unlocking scripts. \n * It extends the standard P2PKH script template and provides a custom lock method.\n */\nexport default class OrdP2PKH extends P2PKH {\n\t/**\n\t * Creates a 1Sat Ordinal + P2PKH locking script for a given address string\n\t *\n\t * @param {string} address - An destination address for the Ordinal.\n\t * @param {Object} [inscription] - Base64 encoded file data and Content type of the file.\n\t * @param {MAP} [metaData] - (optional) MAP Metadata to be included in OP_RETURN.\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\t// unlock method inherits from p2pkh\n\tlock(\n\t\taddress: string,\n\t\tinscription?: Inscription,\n\t\tmetaData?: MAP | undefined,\n\t): Script {\n\t\t// Create ordinal output and inscription in a single output\n\t\tconst lockingScript = new P2PKH().lock(address);\n\t\treturn applyInscription(lockingScript, inscription, metaData);\n\t}\n}\n\nexport const applyInscription = (lockingScript: LockingScript, inscription?: Inscription, metaData?: MAP, withSeparator=false) => {\n\tlet ordAsm = \"\";\n\t// This can be omitted for reinscriptions that just update metadata\n\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\tconst ordHex = toHex(\"ord\");\n\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\tif (!fileHex) {\n\t\t\tthrow new Error(\"Invalid file data\");\n\t\t}\n\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\tif (!fileMediaType) {\n\t\t\tthrow new Error(\"Invalid media type\");\n\t\t}\n\t\tordAsm = `OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`;\n\t}\n\n\tlet inscriptionAsm = `${ordAsm ? `${ordAsm} ${withSeparator ? 'OP_CODESEPARATOR ' : ''}` : \"\"}${lockingScript.toASM()}`;\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tinscriptionAsm = `${inscriptionAsm ? `${inscriptionAsm} ` : \"\"}OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tinscriptionAsm = `${inscriptionAsm} ${toHex(key)} ${toHex(\n\t\t\t\t\tvalue as string,\n\t\t\t\t)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn LockingScript.fromASM(inscriptionAsm);\n}\n","import {\n\ttype Transaction,\n\ttype UnlockingScript,\n\tfromUtxo,\n\ttype TransactionInput,\n\tUtils,\n\tP2PKH,\n  Script,\n} from \"@bsv/sdk\";\nimport { type NftUtxo, type TokenSelectionOptions, type TokenSelectionResult, TokenSelectionStrategy, TokenType, type TokenUtxo, type Utxo } from \"../types\";\nimport { API_HOST } from \"../constants\";\nimport { toToken } from \"satoshi-token\";\n\nconst { fromBase58Check } = Utils;\n\n/**\n * Converts a Utxo object with a base64 encoded script to a Utxo object with a hex encoded script\n * @param {Utxo} utxo - Utxo object with base64 encoded script\n * @param {Object} unlockScriptTemplate - Object with sign and estimateLength functions\n * @returns {TransactionInput} Utxo object with hex encoded script\n */\nexport const inputFromB64Utxo = (\n\tutxo: Utxo,\n\tunlockScriptTemplate: {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>;\n\t},\n): TransactionInput => {\n\tconst input = fromUtxo(\n\t\t{\n\t\t\t...utxo,\n\t\t\tscript: Buffer.from(utxo.script, \"base64\").toString(\"hex\"),\n\t\t},\n\t\tunlockScriptTemplate,\n\t);\n\treturn input;\n};\n\n/**\n * Fetches pay utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @returns {Promise<Utxo[]>} Array of pay utxos\n */\nexport const fetchPayUtxos = async (address: string, scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\"): Promise<Utxo[]> => {\n\tconst payUrl = `${API_HOST}/txos/address/${address}/unspent?bsv20=false`;\n\tconsole.log({ payUrl });\n\tconst payRes = await fetch(payUrl);\n\tif (!payRes.ok) {\n\t\tthrow new Error(\"Error fetching pay utxos\");\n\t}\n\tlet payUtxos = await payRes.json();\n\t// exclude all 1 satoshi utxos\n\tpayUtxos = payUtxos.filter((u: Utxo) => u.satoshis !== 1 && !isLock(u));\n\n\t// Get pubkey hash from address\n\tconst pubKeyHash = fromBase58Check(address);\n\tconst p2pkhScript = new P2PKH().lock(pubKeyHash.data);\n\tpayUtxos = payUtxos.map((utxo: Partial<Utxo>) => ({\n\t\ttxid: utxo.txid,\n\t\tvout: utxo.vout,\n\t\tsatoshis: utxo.satoshis,\n\t\tscript: scriptEncoding === \"hex\" || scriptEncoding === \"base64\" ? Buffer.from(p2pkhScript.toBinary()).toString(scriptEncoding) : p2pkhScript.toASM(),\n\t}));\n\treturn payUtxos as Utxo[];\n};\n\n/**\n * Fetches NFT utxos from the API\n * @param {string} address - Address to fetch utxos for\n * @param {string} [collectionId] - Optional. Collection id (collection insciprtion origin)\n * @param {number} [limit=10] - Optional. Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Optional. Offset for fetching utxos. Default is 0\n * @param {string} [scriptEncoding=\"base64\"] - Optional. Encoding for the script. Default is base64. Options are hex, base64, or asm.\n * @returns {Promise<Utxo[]>} Array of NFT utxos\n */\nexport const fetchNftUtxos = async (\n\taddress: string,\n\tcollectionId?: string,\n\tlimit = 10,\n\toffset = 0,\n  scriptEncoding: \"hex\" | \"base64\" | \"asm\" = \"base64\",\n): Promise<NftUtxo[]> => {\n\tlet url = `${API_HOST}/txos/address/${address}/unspent?limit=${limit}&offset=${offset}&`;\n\n\tif (collectionId) {\n\t\tconst query = {\n\t\t\tmap: {\n\t\t\t\tsubTypeData: { collectionId },\n\t\t\t},\n\t\t};\n\t\tconst b64Query = Buffer.from(JSON.stringify(query)).toString(\"base64\");\n\t\turl += `q=${b64Query}`;\n\t}\n\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching NFT utxos for ${address}`);\n\t}\n\n\t// Returns a BSV20Txo but we only need a few fields\n\tlet nftUtxos = await res.json();\n\n\t// Only include 1 satoshi outputs, non listings\n\tnftUtxos = nftUtxos.filter(\n\t\t(u: {\n\t\t\tsatoshis: number;\n\t\t\tdata: { list: { price: number; payout: string } | undefined } | null;\n\t\t}) => u.satoshis === 1 && !u.data?.list,\n\t);\n\n\tconst outpoints = nftUtxos.map(\n\t\t(utxo: { txid: string; vout: number }) => `${utxo.txid}_${utxo.vout}`,\n\t);\n\t// Fetch the scripts up to the limit\n\tconst nftRes = await fetch(`${API_HOST}/txos/outpoints?script=true`, {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: JSON.stringify([...outpoints]),\n\t});\n\n\tif (!nftRes.ok) {\n\t\tthrow new Error(`Error fetching NFT scripts for ${address}`);\n\t}\n\n\tconst nfts = (await nftRes.json() || [])\n\n\tnftUtxos = nfts.map(\n\t\t(utxo: {\n\t\t\torigin: { outpoint: string };\n\t\t\tscript: string;\n\t\t\tvout: number;\n\t\t\ttxid: string;\n\t\t}) => {\n      let script = utxo.script;\n      if (scriptEncoding === \"hex\") {\n        script = Buffer.from(script, \"base64\").toString(\"hex\");\n      } else if (scriptEncoding === \"asm\") {\n        script = Script.fromHex(Buffer.from(script, \"base64\").toString(\"hex\")).toASM();\n      }\n\t\t\tconst nftUtxo = {\n\t\t\t\torigin: utxo.origin.outpoint,\n\t\t\t\tscript,\n\t\t\t\tvout: utxo.vout,\n\t\t\t\ttxid: utxo.txid,\n\t\t\t\tsatoshis: 1,\n\t\t\t} as NftUtxo;\n\t\t\tif (collectionId) {\n\t\t\t\tnftUtxo.collectionId = collectionId;\n\t\t\t}\n\t\t\treturn nftUtxo;\n\t\t},\n\t);\n\n\treturn nftUtxos as NftUtxo[];\n};\n\n/**\n * Fetches token utxos from the API\n * @param {TokenType} protocol - Token protocol. Either BSV20 or BSV21\n * @param {string} tokenId - Token id. Ticker for BSV20 and id (mint+deploy inscription origin) for BSV21\n * @param {string} address - Address to fetch utxos for\n * @param {number} [limit=10] - Number of utxos to fetch. Default is 10\n * @param {number} [offset=0] - Offset for fetching utxos. Default is 0\n * @returns {Promise<TokenUtxo[]>} Array of token utxos\n */\nexport const fetchTokenUtxos = async (\n\tprotocol: TokenType,\n\ttokenId: string,\n\taddress: string,\n  limit = 10,\n  offset = 0,\n): Promise<TokenUtxo[]> => {\n\tconst url = `${API_HOST}/bsv20/${address}/${protocol === TokenType.BSV20 ? \"tick\" : \"id\"}/${tokenId}?bsv20=true&listing=false&limit=${limit}&offset=${offset}`;\n\tconst res = await fetch(url);\n\tif (!res.ok) {\n\t\tthrow new Error(`Error fetching ${protocol} utxos`);\n\t}\n\n\t// returns a BSV20Txo but we only need a few fields\n\tlet tokenUtxos = await res.json();\n\n\ttokenUtxos = tokenUtxos.map((utxo: Partial<TokenUtxo>) => ({\n\t\tamt: utxo.amt,\n\t\tscript: utxo.script,\n\t\tvout: utxo.vout,\n\t\ttxid: utxo.txid,\n\t\tid: tokenId,\n\t\tsatoshis: 1,\n\t}));\n\n\treturn tokenUtxos as TokenUtxo[];\n};\n\nconst isLock = (utxo: Utxo) => {\n  return !!(utxo as unknown as { lock: { address: string, until: number } }).lock;\n}\n\n/**\n * Selects token UTXOs based on the required amount and specified strategies.\n * @param {TokenUtxo[]} tokenUtxos - Array of token UTXOs.\n * @param {number} requiredTokens - Required amount in tokens (displayed amount).\n * @param {number} decimals - Number of decimal places for the token.\n * @param {TokenSelectionOptions} [options={}] - Options for token selection.\n * @returns {TokenSelectionResult} Selected token UTXOs and total selected amount.\n */\nexport const selectTokenUtxos = (\n  tokenUtxos: TokenUtxo[],\n  requiredTokens: number,\n  decimals: number,\n  options: TokenSelectionOptions = {}\n): TokenSelectionResult => {\n  const {\n    inputStrategy = TokenSelectionStrategy.RetainOrder,\n    outputStrategy = TokenSelectionStrategy.RetainOrder,\n  } = options;\n  \n  // Sort the UTXOs based on the input strategy\n  const sortedUtxos = [...tokenUtxos].sort((a, b) => {\n    if (inputStrategy === TokenSelectionStrategy.RetainOrder) return 0;\n    const amtA = BigInt(a.amt);\n    const amtB = BigInt(b.amt);\n\n    switch (inputStrategy) {\n      case TokenSelectionStrategy.SmallestFirst:\n        return Number(amtA - amtB);\n      case TokenSelectionStrategy.LargestFirst:\n        return Number(amtB - amtA);\n      case TokenSelectionStrategy.Random:\n        return Math.random() - 0.5;\n      default:\n        return 0;\n    }\n  });\n\n  let totalSelected = 0;\n  const selectedUtxos: TokenUtxo[] = [];\n\n  for (const utxo of sortedUtxos) {\n    selectedUtxos.push(utxo);\n    totalSelected += toToken(utxo.amt, decimals);\n    if (totalSelected >= requiredTokens && requiredTokens > 0) {\n      break;\n    }\n  }\n\n  // Sort the selected UTXOs based on the output strategy\n  if (outputStrategy !== TokenSelectionStrategy.RetainOrder) {\n    selectedUtxos.sort((a, b) => {\n      const amtA = BigInt(a.amt);\n      const amtB = BigInt(b.amt);\n\n      switch (outputStrategy) {\n        case TokenSelectionStrategy.SmallestFirst:\n          return Number(amtA - amtB);\n        case TokenSelectionStrategy.LargestFirst:\n          return Number(amtB - amtA);\n        case TokenSelectionStrategy.Random:\n          return Math.random() - 0.5;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return {\n    selectedUtxos,\n    totalSelected,\n    isEnough: totalSelected >= requiredTokens\n  };\n};","import type { Transaction } from \"@bsv/sdk\";\nimport { Sigma } from \"sigma-protocol\";\nimport type { LocalSigner, RemoteSigner } from \"./types\";\n\n/**\n * Signs data in the transaction with Sigma protocol\n * @param {Transaction} tx - Transaction to sign\n * @param {LocalSigner | RemoteSigner} signer - Local or remote signer (used for data signature)\n * @returns {Transaction} Transaction with signed data\n */\nexport const signData = async (\n\ttx: Transaction,\n\tsigner: LocalSigner | RemoteSigner,\n): Promise<Transaction> => {\n\t// Sign tx if idKey or remote signer like starfish/tokenpass\n\tconst idKey = (signer as LocalSigner)?.idKey;\n\tconst keyHost = (signer as RemoteSigner)?.keyHost;\n\n\tif (idKey) {\n\t\tconst sigma = new Sigma(tx);\n\t\tconst { signedTx } = sigma.sign(idKey);\n\t\treturn signedTx;\n\t}\n\tif (keyHost) {\n\t\tconst authToken = (signer as RemoteSigner)?.authToken;\n\t\tconst sigma = new Sigma(tx);\n\t\ttry {\n\t\t\tconst { signedTx } = await sigma.remoteSign(keyHost, authToken);\n\t\t\treturn signedTx;\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Error(`Remote signing to ${keyHost} failed`);\n\t\t}\n\t}\n\tthrow new Error(\"Signer must be a LocalSigner or RemoteSigner\");\n};\n","import type { MAP, PreMAP } from \"../types\";\n\nconst stringifyMetaData = (metaData?: PreMAP): MAP | undefined => {\n  if (!metaData) return undefined;\n\tconst result: MAP = {\n\t\tapp: metaData.app,\n\t\ttype: metaData.type,\n\t};\n\n\tfor (const [key, value] of Object.entries(metaData)) {\n\t\tif (value !== undefined) {\n\t\t\tif (typeof value === \"string\") {\n\t\t\t\tresult[key] = value;\n\t\t\t} else if (Array.isArray(value) || typeof value === \"object\") {\n\t\t\t\tresult[key] = JSON.stringify(value);\n\t\t\t} else {\n\t\t\t\tresult[key] = String(value);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport default stringifyMetaData;\n","import { Transaction, SatoshisPerKilobyte, P2PKH, Script, Utils } from \"@bsv/sdk\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n\tUtxo,\n\tCreateOrdinalsConfig,\n\tCreateOrdinalsCollectionConfig,\n\tCreateOrdinalsCollectionItemConfig,\n  ChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Creates a transaction with inscription outputs\n * @param {CreateOrdinalsConfig | CreateOrdinalsCollectionConfig | CreateOrdinalsCollectionItemConfig} config - Configuration object for creating ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {string} config.changeAddress - Optional. Address to send change to. If not provided, defaults to paymentPk address\n * @param {number} config.satsPerKb - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} config.metaData - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} config.signer - Optional. Local or remote signer (used for data signature)\n * @param {Payment[]} config.additionalPayments - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction with inscription outputs\n */\nexport const createOrdinals = async (\n\tconfig:\n\t\t| CreateOrdinalsConfig\n\t\t| CreateOrdinalsCollectionConfig\n\t\t| CreateOrdinalsCollectionItemConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tdestinations,\n\t\tpaymentPk,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tadditionalPayments = [],\n\t} = config;\n\t\n\t// Warn if creating many inscriptions at once\n\tif (destinations.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Outputs\n\t// Add inscription outputs\n\tfor (const destination of destinations) {\n\t\tif (!destination.inscription) {\n\t\t\tthrow new Error(\"Inscription is required for all destinations\");\n\t\t}\n\n\t\t// remove any undefined fields from metadata\n\t\tif (metaData) {\n\t\t\tfor(const key of Object.keys(metaData)) {\n\t\t\t\tif (metaData[key] === undefined) {\n\t\t\t\t\tdelete metaData[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(metaData),\n\t\t\t),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\n\tif(signer) {\n\t\tconst utxo = utxos.pop() as Utxo\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the transaction\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t)));\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\ttx = await signData(tx, signer);\n\t}\n\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the transaction\");\n\t\t}\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to create ordinals. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\tScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type { SendOrdinalsConfig, Utxo, ChangeResult } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\n\n/**\n * Sends ordinals to the given destinations\n * @param {SendOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {Utxo[]} config.paymentUtxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.ordinals - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Destination[]} config.destinations - Array of destinations with addresses and inscriptions\n * @param {string} [config.changeAddress] - Optional. Address to send change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {boolean} [config.enforceUniformSend] - Optional. Default: true. Enforce that the number of destinations matches the number of ordinals being sent. Sending ordinals requires a 1:1 mapping of destinations to ordinals. This is only used for sub-protocols like BSV21 that manage tokens without sending the inscriptions directly.\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, and change utxo\n */\nexport const sendOrdinals = async (\n\tconfig: SendOrdinalsConfig,\n): Promise<ChangeResult> => {\n\tif (!config.satsPerKb) {\n\t\tconfig.satsPerKb = DEFAULT_SAT_PER_KB;\n\t}\n\tif (!config.additionalPayments) {\n\t\tconfig.additionalPayments = [];\n\t}\n\tif (config.enforceUniformSend === undefined) {\n\t\tconfig.enforceUniformSend = true;\n\t}\n\n\tconst {ordPk, paymentPk} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(config.satsPerKb);\n\tlet tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of config.ordinals) {\n    const ordKeyToUse = ordUtxo.pk || ordPk;\n\t\tif (!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the ordinal\");\n\t\t}\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordKeyToUse, \n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, 'base64'))\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// check that ordinals coming in matches ordinals going out if supplied\n\tif (\n\t\tconfig.enforceUniformSend &&\n\t\tconfig.destinations.length !== config.ordinals.length\n\t) {\n\t\tthrow new Error(\n\t\t\t\"Number of destinations must match number of ordinals being sent\",\n\t\t);\n\t}\n\n\t// Add ordinal outputs\n\tfor (const destination of config.destinations) {\n\t\tlet s: Script;\n\t\tif (\n\t\t\tdestination.inscription?.dataB64 &&\n\t\t\tdestination.inscription?.contentType\n\t\t) {\n\t\t\ts = new OrdP2PKH().lock(\n\t\t\t\tdestination.address,\n\t\t\t\tdestination.inscription,\n\t\t\t\tstringifyMetaData(config.metaData),\n\t\t\t);\n\t\t} else {\n\t\t\ts = new P2PKH().lock(destination.address);\n\t\t}\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: s,\n\t\t});\n\t}\n\n  \n\t// Add additional payments if any\n\tfor (const p of config.additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n  // add change to the outputs\n\tlet payChange: Utxo | undefined;\n\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of config.paymentUtxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\tspentOutpoints.push(`${utxo.txid}_${utxo.vout}`);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (totalSatsIn < totalSatsOut) {\n\t\tthrow new Error(\"Not enough ordinals to send\");\n\t}\n\n\tif (config.signer) {\n\t\ttx = await signData(tx, config.signer);\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t\tpayChange,\n\t};\n};\n","import {\n\ttype PrivateKey,\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tP2PKH,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport type { ChangeResult, SendUtxosConfig, Utxo } from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Sends utxos to the given destination\n * @param {SendUtxosConfig} config - Configuration object for sending utxos\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign utxos\n * @param {Payment[]} config.payments - Array of payments with addresses and amounts\n * @param {number} [config.satsPerKb] - (Optional) Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {string} [config.changeAddress] - (Optional) Address to send change to. If not provided, defaults to paymentPk address\n * @param {string} [config.metaData] - (Optional) Metadata to include in OP_RETURN of the payment output\n * @returns {Promise<ChangeResult>} - Returns a ChangeResult: payChange, tx, and spentOutputs\n */\nexport const sendUtxos = async (\n\tconfig: SendUtxosConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tpayments,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\t// Outputs\n\tfor (const payment of payments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new OrdP2PKH().lock(payment.to, undefined, metaData),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + (out.satoshis || 0),\n\t\t0,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the utxos\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse,\n\t\t\t\"all\",\n\t\t\ttrue,\n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + fee) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + fee) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to send. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n  // Change\n\tlet payChange: Utxo | undefined;\n  // if we need to send change, add it to the outputs\n\tif (totalSatsIn > totalSatsOut + fee) {\n    const changeAddress = config.changeAddress || paymentPk?.toAddress();\n    if(!changeAddress) {\n      throw new Error(\"Either changeAddress or paymentPk is required\");\n    }\n    const changeScript = new P2PKH().lock(changeAddress);\n\t\tconst changeOut: TransactionOutput = {\n\t\t\tlockingScript: changeScript,\n\t\t\tchange: true,\n\t\t};\n\t\tpayChange = {\n\t\t\ttxid: \"\", // txid is not known yet\n\t\t\tvout: tx.outputs.length,\n\t\t\tsatoshis: 0, // change output amount is not known yet\n\t\t\tscript: Buffer.from(changeScript.toHex(), \"hex\").toString(\"base64\"),\n\t\t};\n\t\ttx.addOutput(changeOut);\n\t} else if (totalSatsIn < totalSatsOut + fee) {\n\t\tconsole.log(\"No change needed\");\n\t}\n\n\t// Calculate fee\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: utxos.map((utxo) => `${utxo.txid}_${utxo.vout}`),\n\t\tpayChange,\n\t};\n};\n","import {\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdP2PKH, { applyInscription } from \"./templates/ordP2pkh\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferOrdTokensConfig,\n\ttype TokenChangeResult,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tTokenInputMode,\n\ttype TokenSplitConfig,\n\ttype PreMAP,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { signData } from \"./signData\";\nimport stringifyMetaData from \"./utils/subtypeData\";\nimport { ReturnTypes, toToken, toTokenSat } from \"satoshi-token\";\n\n/**\n * Transfer tokens to a destination\n * @param {TransferOrdTokensConfig} config - Configuration object for transferring tokens\n * @param {TokenType} config.protocol - Token protocol. Must be TokenType.BSV20 or TokenType.BSV21\n * @param {string} config.tokenID - Token ID. Either the tick or id value depending on the protocol\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {TokenUtxo[]} config.inputTokens - Token utxos to spend\n * @param {Distribution[]} config.distributions - Array of destinations with addresses and amounts\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {decimals} config.decimals - Number of decimal places for the token\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {string} [config.tokenChangeAddress] - Optional. Address to send token change to, if any. If not provided, defaults to ordPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {PreMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in inscriptions\n * @param {LocalSigner | RemoteSigner} [config.signer] - Optional. Signer object to sign the transaction\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @param {TokenInputMode} [config.tokenInputMode] - Optional. \"all\" or \"needed\". Default is \"needed\"\n * @param {TokenSplitConfig} [config.tokenSplitConfig] - Optional. Configuration object for splitting token change\n * @param {burn} [config.burn] - Optional. Set to true to burn the tokens.\n * @returns {Promise<TokenChangeResult>} Transaction with token transfer outputs\n */\nexport const transferOrdTokens = async (\n\tconfig: TransferOrdTokensConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tinputTokens,\n\t\tdistributions,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tmetaData,\n\t\tsigner,\n\t\tdecimals,\n\t\tadditionalPayments = [],\n\t\tburn = false,\n\t\ttokenInputMode = TokenInputMode.Needed,\n\t\tsplitConfig = {\n\t\t\toutputs: 1,\n\t\t\tomitMetaData: false,\n\t\t},\n\t} = config;\n\n\t// Ensure these inputs are for the expected token\n\tif (!inputTokens.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\t// calculate change amount\n\tlet changeTsats = 0n;\n\tlet totalTsatIn = 0n;\n\tlet totalTsatOut = 0n;\n\tconst totalAmtNeeded = distributions.reduce(\n\t\t(acc, dist) => acc + toTokenSat(dist.tokens, decimals, ReturnTypes.BigInt),\n\t\t0n,\n\t);\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tlet tx = new Transaction();\n\n\t// Handle token inputs based on tokenInputMode\n\tlet tokensToUse: TokenUtxo[];\n\tif (tokenInputMode === TokenInputMode.All) {\n\t\ttokensToUse = inputTokens;\n\t\ttotalTsatIn = inputTokens.reduce(\n\t\t\t(acc, token) => acc + BigInt(token.amt),\n\t\t\t0n,\n\t\t);\n\t} else {\n\t\ttokensToUse = [];\n\t\tfor (const token of inputTokens) {\n\t\t\ttokensToUse.push(token);\n\t\t\ttotalTsatIn += BigInt(token.amt);\n\t\t\tif (totalTsatIn >= totalAmtNeeded) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (totalTsatIn < totalAmtNeeded) {\n\t\t\tthrow new Error(\"Not enough tokens to satisfy the transfer amount\");\n\t\t}\n\t}\n\n\tfor (const token of tokensToUse) {\n    const ordKeyToUse = token.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\tconst inputScriptBinary = Utils.toArray(token.script, \"base64\");\n\t\tconst inputScript = Script.fromBinary(inputScriptBinary);\n\t\ttx.addInput(\n\t\t\tinputFromB64Utxo(\n\t\t\t\ttoken,\n\t\t\t\tnew OrdP2PKH().unlock(ordKeyToUse, \"all\", true, token.satoshis, inputScript),\n\t\t\t),\n\t\t);\n\t}\n\n\t// remove any undefined fields from metadata\n\tif (metaData) {\n\t\tfor (const key of Object.keys(metaData)) {\n\t\t\tif (metaData[key] === undefined) {\n\t\t\t\tdelete metaData[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t// build destination inscriptions\n\tfor (const dest of distributions) {\n\t\tconst bigAmt = toTokenSat(dest.tokens, decimals, ReturnTypes.BigInt);\n    console.log({distTokenSat: bigAmt});\n\t\tconst transferInscription: TransferTokenInscription = {\n\t\t\tp: \"bsv-20\",\n\t\t\top: burn ? \"burn\" : \"transfer\",\n\t\t\tamt: bigAmt.toString(),\n\t\t};\n\t\tlet inscriptionObj: TransferBSV20Inscription | TransferBSV21Inscription;\n\t\tif (protocol === TokenType.BSV20) {\n\t\t\tinscriptionObj = {\n\t\t\t\t...transferInscription,\n\t\t\t\ttick: tokenID,\n\t\t\t} as TransferBSV20Inscription;\n\t\t} else if (protocol === TokenType.BSV21) {\n\t\t\tinscriptionObj = {\n\t\t\t\t...transferInscription,\n\t\t\t\tid: tokenID,\n\t\t\t} as TransferBSV21Inscription;\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid protocol\");\n\t\t}\n\n\t\tconst inscription = {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscriptionObj)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t}\n\t\tlet lockingScript = typeof dest.address == 'string' ?\n\t\t\tnew OrdP2PKH().lock(\n\t\t\t\tdest.address,\n\t\t\t\tinscription,\n\t\t\t\t// when present, include metadata on each distribution if omit is not specified\n\t\t\t\tdest.omitMetaData ? undefined : stringifyMetaData(metaData),\n\t\t\t) :\n\t\t\tapplyInscription(dest.address, inscription);\n\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript,\n\t\t});\n\t\ttotalTsatOut += bigAmt;\n\t}\n\n\tchangeTsats = totalTsatIn - totalTsatOut;\n\t\n\t// check that you have enough tokens to send and return change\n\tif (changeTsats < 0n) {\n\t\tthrow new Error(\"Not enough tokens to send\");\n\t}\n\n\tlet tokenChange: TokenUtxo[] = [];\n\tif (changeTsats > 0n) {\n    const tokenChangeAddress = config.tokenChangeAddress || ordPk?.toAddress();\n\t\tif(!tokenChangeAddress) {\n\t\t\tthrow new Error(\"ordPk or changeAddress required for token change\");\n\t\t}\n\t\ttokenChange = splitChangeOutputs(\n\t\t\ttx,\n\t\t\tchangeTsats,\n\t\t\tprotocol,\n\t\t\ttokenID,\n\t\t\ttokenChangeAddress,\n\t\t\tmetaData,\n\t\t\tsplitConfig,\n      \t\tdecimals,\n\t\t);\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to transfer tokens. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\tif (signer) {\n\t\ttx = await signData(tx, signer);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// assign txid to tokenChange outputs\n\tconst txid = tx.id(\"hex\") as string;\n\tfor (const change of tokenChange) {\n\t\tchange.txid = txid;\n\t}\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t\ttokenChange,\n\t};\n};\n\nconst splitChangeOutputs = (\n  tx: Transaction,\n  changeTsats: bigint,\n  protocol: TokenType,\n  tokenID: string,\n  tokenChangeAddress: string,\n  metaData: PreMAP | undefined,\n  splitConfig: TokenSplitConfig,\n  decimals: number,\n): TokenUtxo[] => {\n  const tokenChanges: TokenUtxo[] = [];\n\n  const threshold = splitConfig.threshold !== undefined ? toTokenSat(splitConfig.threshold, decimals, ReturnTypes.BigInt) : undefined;\n  const maxOutputs = splitConfig.outputs;\n  const changeAmt = changeTsats;\n  console.log({splitChangeAmt: changeAmt})\n  let splitOutputs: bigint;\n  if (threshold !== undefined && threshold > 0n) {\n      splitOutputs = changeAmt / threshold;\n      splitOutputs = BigInt(Math.min(Number(splitOutputs), maxOutputs));\n  } else {\n      // If no threshold is specified, use maxOutputs directly\n      splitOutputs = BigInt(maxOutputs);\n  }\n  splitOutputs = BigInt(Math.max(Number(splitOutputs), 1));\n\n  const baseChangeAmount = changeAmt / splitOutputs;\n  let remainder = changeAmt % splitOutputs;\n\n  for (let i = 0n; i < splitOutputs; i++) {\n      let splitAmount = baseChangeAmount;\n      if (remainder > 0n) {\n          splitAmount += 1n;\n          remainder -= 1n;\n      }\n\n      const transferInscription: TransferTokenInscription = {\n          p: \"bsv-20\",\n          op: \"transfer\",\n          amt: splitAmount.toString(),\n      };\n      let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n      if (protocol === TokenType.BSV20) {\n          inscription = {\n              ...transferInscription,\n              tick: tokenID,\n          } as TransferBSV20Inscription;\n      } else if (protocol === TokenType.BSV21) {\n          inscription = {\n              ...transferInscription,\n              id: tokenID,\n          } as TransferBSV21Inscription;\n      } else {\n          throw new Error(\"Invalid protocol\");\n      }\n\n      const lockingScript = new OrdP2PKH().lock(\n          tokenChangeAddress,\n          {\n              dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n              contentType: \"application/bsv-20\",\n          },\n          splitConfig.omitMetaData ? undefined : stringifyMetaData(metaData),\n      );\n\n      const vout = tx.outputs.length;\n      tx.addOutput({ lockingScript, satoshis: 1 });\n      tokenChanges.push({\n          id: tokenID,\n          satoshis: 1,\n          script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n          txid: \"\",\n          vout,\n          amt: splitAmount.toString(),\n      });\n  }\n\n  return tokenChanges;\n};","import {\n\tBigNumber,\n\ttype LockingScript,\n\tOP,\n\tP2PKH,\n\ttype PrivateKey,\n\tScript,\n\ttype Transaction,\n\tTransactionSignature,\n\tUnlockingScript,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { toHex } from \"../utils/strings\";\nimport type { Inscription } from \"../types\";\n\nexport const oLockPrefix =\n\t\"2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000\";\nexport const oLockSuffix =\n\t\"615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868\";\n\n/**\n * OrdLock class implementing ScriptTemplate.\n *\n * This class provides methods for interacting with OrdinalLock contract \n */\nexport default class OrdLock {\n\t/**\n\t * Creates a 1Sat Ordinal Lock script\n\t *\n\t * @param {string} ordAddress - An address which can cancel listing.\n\t * @param {string} payAddress - Address which is paid on purchase\n\t * @param {number} price - Listing price in satoshis\n\t * @returns {LockingScript} - A P2PKH locking script.\n\t */\n\tlock(\n\t\tordAddress: string,\n\t\tpayAddress: string,\n\t\tprice: number,\n\t\tinscription?: Inscription,\n\t): Script {\n\t\tconst cancelPkh = Utils.fromBase58Check(ordAddress).data as number[];\n\t\tconst payPkh = Utils.fromBase58Check(payAddress).data as number[];\n\n\t\tlet script = new Script()\n\t\tif (inscription?.dataB64 !== undefined && inscription?.contentType !== undefined) {\n\t\t\tconst ordHex = toHex(\"ord\");\n\t\t\tconst fsBuffer = Buffer.from(inscription.dataB64, \"base64\");\n\t\t\tconst fileHex = fsBuffer.toString(\"hex\").trim();\n\t\t\tif (!fileHex) {\n\t\t\t\tthrow new Error(\"Invalid file data\");\n\t\t\t}\n\t\t\tconst fileMediaType = toHex(inscription.contentType);\n\t\t\tif (!fileMediaType) {\n\t\t\t\tthrow new Error(\"Invalid media type\");\n\t\t\t}\n\t\t\tscript = Script.fromASM(`OP_0 OP_IF ${ordHex} OP_1 ${fileMediaType} OP_0 ${fileHex} OP_ENDIF`);\n\t\t}\n\n\t\treturn script.writeScript(Script.fromHex(oLockPrefix))\n\t\t\t.writeBin(cancelPkh)\n\t\t\t.writeBin(OrdLock.buildOutput(price, new P2PKH().lock(payPkh).toBinary()))\n\t\t\t.writeScript(Script.fromHex(oLockSuffix))\n\t}\n\n\tcancelListing(\n\t\tprivateKey: PrivateKey,\n\t\tsignOutputs: 'all' | 'none' | 'single' = 'all',\n\t\tanyoneCanPay = false,\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: () => Promise<number>\n\t} {\n\t\tconst p2pkh = new P2PKH().unlock(privateKey, signOutputs, anyoneCanPay, sourceSatoshis, lockingScript)\n\t\treturn {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await p2pkh.sign(tx, inputIndex)).writeOpCode(OP.OP_1)\n\t\t\t},\n\t\t\testimateLength: async () => {\n\t\t\t\treturn 107\n\t\t\t}\n\t\t}\n\t}\n\n\tpurchaseListing(\n\t\tsourceSatoshis?: number,\n\t\tlockingScript?: Script\n\t): {\n\t\tsign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>\n\t\testimateLength: (tx: Transaction, inputIndex: number) => Promise<number>\n\t} {\n\t\tconst purchase = {\n\t\t\tsign: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\tif (tx.outputs.length < 2) {\n\t\t\t\t\tthrow new Error(\"Malformed transaction\")\n\t\t\t\t}\n\t\t\t\tconst script = new UnlockingScript()\n\t\t\t\t\t.writeBin(OrdLock.buildOutput(\n\t\t\t\t\t\ttx.outputs[0].satoshis || 0,\n\t\t\t\t\t\ttx.outputs[0].lockingScript.toBinary()\n\t\t\t\t\t))\n\t\t\t\tif (tx.outputs.length > 2) {\n\t\t\t\t\tconst writer = new Utils.Writer()\n\t\t\t\t\tfor (const output of tx.outputs.slice(2)) {\n\t\t\t\t\t\twriter.write(OrdLock.buildOutput(output.satoshis || 0, output.lockingScript.toBinary()))\n\t\t\t\t\t}\n\t\t\t\t\tscript.writeBin(writer.toArray())\n\t\t\t\t} else {\n\t\t\t\t\tscript.writeOpCode(OP.OP_0)\n\t\t\t\t}\n\n\t\t\t\tconst input = tx.inputs[inputIndex]\n\t\t\t\tlet sourceSats = sourceSatoshis as number\n\t\t\t\tif (!sourceSats && input.sourceTransaction) {\n\t\t\t\t\tsourceSats = input.sourceTransaction.outputs[input.sourceOutputIndex].satoshis as number\n\t\t\t\t} else if (!sourceSatoshis) {\n\t\t\t\t\tthrow new Error(\"sourceTransaction or sourceSatoshis is required\")\n\t\t\t\t}\n\n\t\t\t\tconst sourceTXID = (input.sourceTXID || input.sourceTransaction?.id('hex')) as string\n\t\t\t\tlet subscript = lockingScript as LockingScript\n\t\t\t\tif (!subscript) {\n\t\t\t\t\tsubscript = input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript as LockingScript\n\t\t\t\t}\n\t\t\t\tconst preimage = TransactionSignature.format({\n\t\t\t\t\tsourceTXID,\n\t\t\t\t\tsourceOutputIndex: input.sourceOutputIndex,\n\t\t\t\t\tsourceSatoshis: sourceSats,\n\t\t\t\t\ttransactionVersion: tx.version,\n\t\t\t\t\totherInputs: [],\n\t\t\t\t\tinputIndex,\n\t\t\t\t\toutputs: tx.outputs,\n\t\t\t\t\tinputSequence: input.sequence,\n\t\t\t\t\tsubscript,\n\t\t\t\t\tlockTime: tx.lockTime,\n\t\t\t\t\tscope: TransactionSignature.SIGHASH_ALL |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_ANYONECANPAY |\n\t\t\t\t\t\tTransactionSignature.SIGHASH_FORKID\n\t\t\t\t});\n\n\t\t\t\treturn script.writeBin(preimage).writeOpCode(OP.OP_0)\n\t\t\t},\n\t\t\testimateLength: async (tx: Transaction, inputIndex: number) => {\n\t\t\t\treturn (await purchase.sign(tx, inputIndex)).toBinary().length\n\t\t\t}\n\t\t}\n\t\treturn purchase\n\t}\n\n\tstatic buildOutput(satoshis: number, script: number[]): number[] {\n\t\tconst writer = new Utils.Writer()\n\t\twriter.writeUInt64LEBn(new BigNumber(satoshis))\n\t\twriter.writeVarIntNum(script.length)\n\t\twriter.write(script)\n\t\treturn writer.toArray()\n\t}\n}\n","import {\n  P2PKH,\n  SatoshisPerKilobyte,\n  Script,\n  Transaction,\n  Utils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n  type TokenChangeResult,\n  TokenType,\n  type CreateOrdListingsConfig,\n  type CreateOrdTokenListingsConfig,\n  type TokenUtxo,\n  type TransferBSV20Inscription,\n  type TransferBSV21Inscription,\n  type TransferTokenInscription,\n  type Utxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { ReturnTypes, toToken, toTokenSat } from \"satoshi-token\";\nconst { toArray } = Utils;\n\nexport const createOrdListings = async (config: CreateOrdListingsConfig) => {\n  const {\n    utxos,\n    listings,\n    paymentPk,\n    ordPk,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n    additionalPayments = [],\n  } = config;\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n      ),\n    });\n    const inputScriptBinary = toArray(listing.listingUtxo.script, \"base64\");\n    const inputScript = Script.fromBinary(inputScriptBinary);\n\n    const ordKeyToUse = listing.listingUtxo.pk || ordPk;\n    if (!ordKeyToUse) {\n      throw new Error(\"Private key is required to sign the ordinal\");\n    }\n    tx.addInput(inputFromB64Utxo(\n      listing.listingUtxo,\n      new OrdP2PKH().unlock(\n        ordKeyToUse,\n        \"all\",\n        true,\n        listing.listingUtxo.satoshis,\n        inputScript,\n      ),\n    ));\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // Check if change is needed\n  let payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n  if(!changeAddress) {\n    throw new Error(\"changeAddress or private key is required\");\n  }\n  const changeScript = new P2PKH().lock(changeAddress);\n  const changeOutput = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOutput);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n    if (!payKeyToUse) {\n      throw new Error(\"Private key is required to sign the transaction\");\n    }\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      payKeyToUse,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // Calculate fee\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid: tx.id(\"hex\") as string,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n  };\n};\n\nexport const createOrdTokenListings = async (\n  config: CreateOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n  const {\n    utxos,\n    protocol,\n    tokenID,\n    ordPk,\n    paymentPk,\n    additionalPayments = [],\n    tokenChangeAddress,\n    inputTokens,\n    listings,\n    decimals,\n    satsPerKb = DEFAULT_SAT_PER_KB,\n  } = config;\n\n\n  // Warn if creating many inscriptions at once\n  if (listings.length > 100) {\n    console.warn(\n      \"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n    );\n  }\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  // calculate change amount\n  let changeAmt = 0n;\n  let totalAmtIn = 0n;\n  let totalAmtOut = 0n;\n\n  // Ensure these inputs are for the expected token\n  if (!inputTokens.every((token) => token.id === tokenID)) {\n    throw new Error(\"Input tokens do not match the provided tokenID\");\n  }\n\n  const modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n  const tx = new Transaction();\n  // Outputs\n  // Add listing outputs\n  for (const listing of listings) {\n    // NewTokenListing is not adjusted for decimals\n    const bigAmt = toTokenSat(listing.tokens, decimals, ReturnTypes.BigInt);\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: bigAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    tx.addOutput({\n      satoshis: 1,\n      lockingScript: new OrdLock().lock(\n        listing.ordAddress,\n        listing.payAddress,\n        listing.price,\n        {\n          dataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n          contentType: \"application/bsv-20\",\n        },\n      ),\n    });\n    totalAmtOut += bigAmt;\n  }\n\n  // Input tokens are already adjusted for decimals\n  for (const token of inputTokens) {\n    const ordKeyToUse = token.pk || ordPk;\n    if(!ordKeyToUse) {\n      throw new Error(\"Private key is required to sign the ordinal\");\n    }\n    tx.addInput(inputFromB64Utxo(\n      token,\n      new OrdP2PKH().unlock(\n        ordKeyToUse,\n        \"all\",\n        true,\n        token.satoshis,\n        Script.fromBinary(toArray(token.script, \"base64\")),\n      ),\n    ));\n\n    totalAmtIn += BigInt(token.amt);\n  }\n  changeAmt = totalAmtIn - totalAmtOut;\n\n  let tokenChange: TokenUtxo[] | undefined;\n  // check that you have enough tokens to send and return change\n  if (changeAmt < 0n) {\n    throw new Error(\"Not enough tokens to send\");\n  }\n  if (changeAmt > 0n) {\n    const transferInscription: TransferTokenInscription = {\n      p: \"bsv-20\",\n      op: \"transfer\",\n      amt: changeAmt.toString(),\n    };\n    let inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n    if (protocol === TokenType.BSV20) {\n      inscription = {\n        ...transferInscription,\n        tick: tokenID,\n      } as TransferBSV20Inscription;\n    } else if (protocol === TokenType.BSV21) {\n      inscription = {\n        ...transferInscription,\n        id: tokenID,\n      } as TransferBSV21Inscription;\n    } else {\n      throw new Error(\"Invalid protocol\");\n    }\n\n    const lockingScript = new OrdP2PKH().lock(tokenChangeAddress, {\n      dataB64: Buffer.from(JSON.stringify(inscription)).toString('base64'),\n      contentType: \"application/bsv-20\",\n    });\n    const vout = tx.outputs.length;\n    tx.addOutput({ lockingScript, satoshis: 1 });\n    tokenChange = [{\n      id: tokenID,\n      satoshis: 1,\n      script: Buffer.from(lockingScript.toBinary()).toString(\"base64\"),\n      txid: \"\",\n      vout,\n      amt: changeAmt.toString(),\n    }];\n  }\n\n  // Add additional payments if any\n  for (const p of additionalPayments) {\n    tx.addOutput({\n      satoshis: p.amount,\n      lockingScript: new P2PKH().lock(p.to),\n    });\n  }\n\n  // add change to the outputs\n  let payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n  if(!changeAddress) {\n    throw new Error(\"Either changeAddress or paymentPk is required\");\n  }\n\n  const changeScript = new P2PKH().lock(changeAddress);\n  const changeOut = {\n    lockingScript: changeScript,\n    change: true,\n  };\n  tx.addOutput(changeOut);\n\n  let totalSatsIn = 0n;\n  const totalSatsOut = tx.outputs.reduce(\n    (total, out) => total + BigInt(out.satoshis || 0),\n    0n,\n  );\n  let fee = 0;\n  for (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n    if(!payKeyToUse) {\n      throw new Error(\"Private key is required to sign the payment\");\n    }\n    const input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n      payKeyToUse,\n      \"all\",\n      true,\n      utxo.satoshis,\n      Script.fromBinary(Utils.toArray(utxo.script, 'base64'))\n    ));\n\n    tx.addInput(input);\n    // stop adding inputs if the total amount is enough\n    totalSatsIn += BigInt(utxo.satoshis);\n    fee = await modelOrFee.computeFee(tx);\n\n    if (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n      break;\n    }\n  }\n\n  // make sure we have enough\n  if (totalSatsIn < totalSatsOut + BigInt(fee)) {\n    throw new Error(\n      `Not enough funds to create token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n    );\n  }\n\n  // estimate the cost of the transaction and assign change value\n  await tx.fee(modelOrFee);\n\n  // Sign the transaction\n  await tx.sign();\n\n  const txid = tx.id(\"hex\") as string;\n  if (tokenChange) {\n    tokenChange = tokenChange.map((tc) => ({ ...tc, txid }));\n  }\n  // check for change\n  const payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n  if (payChangeOutIdx !== -1) {\n    const changeOutput = tx.outputs[payChangeOutIdx];\n    payChange = {\n      satoshis: changeOutput.satoshis as number,\n      txid,\n      vout: payChangeOutIdx,\n      script: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n        \"base64\",\n      ),\n    };\n  }\n\n  if (payChange) {\n    const changeOutput = tx.outputs[tx.outputs.length - 1];\n    payChange.satoshis = changeOutput.satoshis as number;\n    payChange.txid = tx.id(\"hex\") as string;\n  }\n\n  return {\n    tx,\n    spentOutpoints: tx.inputs.map(\n      (i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n    ),\n    payChange,\n    tokenChange,\n  };\n};\n","import { P2PKH, SatoshisPerKilobyte, Script, Transaction, Utils } from \"@bsv/sdk\";\nimport {\n\tTokenType,\n\ttype TokenUtxo,\n\ttype CancelOrdListingsConfig,\n\ttype CancelOrdTokenListingsConfig,\n\ttype Destination,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n  type ChangeResult,\n  type TokenChangeResult,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\n\n/**\n * Cancel Ordinal Listings\n * @param {CancelOrdListingsConfig} config - Configuration object for cancelling ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const cancelOrdListings = async (config: CancelOrdListingsConfig): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tlistingUtxos,\n\t\tordPk,\n\t\tpaymentPk,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\n\t// Warn if creating many inscriptions at once\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\t\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n    const ordKeyToUse = listingUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\t// Add cancel outputs returning listed ordinals\n\t\ttx.addOutput({\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: new P2PKH().lock((ordKeyToUse).toAddress().toString()),\n\t\t});\n\t}\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst change = changeAddress;\n\tconst changeScript = new P2PKH().lock(change);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo, \n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue, \n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t\t)\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel ordinal listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n * Cancel Ordinal Token Listings\n * @param {CancelOrdTokenListingsConfig} config - Configuration object for cancelling token ordinals\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {Utxo[]} config.listingUtxos - Listing utxos to cancel (with base64 encoded scripts)\n * @param {string} config.tokenID - Token ID of the token to cancel listings for\n * @param {string} config.ordAddress - Address to send the cancelled token to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @returns {Promise<TokenChangeResult>} Transaction, spent outpoints, change utxo, token change utxos\n */\nexport const cancelOrdTokenListings = async (\n\tconfig: CancelOrdTokenListingsConfig,\n): Promise<TokenChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tpaymentPk,\n\t\tordPk,\n\t\tadditionalPayments,\n\t\tlistingUtxos,\n\t\tutxos,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t} = config;\n\t// calculate change amount\n\tlet totalAmtIn = 0;\n\n\tif (listingUtxos.length > 100) {\n\t\tconsole.warn(\n\t\t\t\"Creating many inscriptions at once can be slow. Consider using multiple transactions instead.\",\n\t\t);\n\t}\n\n\t// Ensure these inputs are for the expected token\n\tif (!listingUtxos.every((token) => token.id === tokenID)) {\n\t\tthrow new Error(\"Input tokens do not match the provided tokenID\");\n\t}\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinals we're cancelling\n\tfor (const listingUtxo of listingUtxos) {\n    const ordKeyToUse = listingUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key required for token input\");\n\t\t}\n\t\ttx.addInput(inputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().cancelListing(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tlistingUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, 'base64'))\n\t\t\t)\n\t\t));\n\t\ttotalAmtIn += Number.parseInt(listingUtxo.amt);\n\t}\n\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: totalAmtIn.toString(),\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\n  const ordAddress = config.ordAddress || ordPk?.toAddress();\n\tif(!ordAddress) {\n\t\tthrow new Error(\"ordAddress or ordPk required for token output\");\n\t}\n\tconst destination: Destination = {\n\t\taddress: ordAddress,\n\t\tinscription: {\n\t\t\tdataB64: Buffer.from(JSON.stringify(inscription)).toString(\"base64\"),\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t},\n\t};\n\n  const lockingScript = new OrdP2PKH().lock(\n    destination.address,\n    destination.inscription\n  );\n\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"paymentPk or changeAddress required for payment change\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"paymentPk required for payment utxo\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to cancel token listings. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n  const tokenChange: TokenUtxo[] = [{\n    amt: totalAmtIn.toString(),\n    script: Buffer.from(lockingScript.toHex(), 'hex').toString('base64'),\n    txid: tx.id(\"hex\") as string,\n    vout: 0,\n    id: tokenID,\n    satoshis: 1\n  }];\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n    tokenChange,\n\t};\n};","import {\n\tLockingScript,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\tScript,\n\tTransaction,\n\tUtils,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\nimport OrdLock from \"./templates/ordLock\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport {\n\ttype ChangeResult,\n\tRoytaltyType,\n\tTokenType,\n\ttype PurchaseOrdListingConfig,\n\ttype PurchaseOrdTokenListingConfig,\n\ttype TransferBSV20Inscription,\n\ttype TransferBSV21Inscription,\n\ttype TransferTokenInscription,\n\ttype Utxo,\n\tMAP,\n} from \"./types\";\nimport { resolvePaymail } from \"./utils/paymail\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\n\n/**\n * Purchase a listing\n * @param {PurchaseOrdListingConfig} config - Configuration object for purchasing a listing\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {ExistingListing} config.listing - Listing to purchase\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {Royalty[]} [config.royalties] - Optional. Royalties to pay\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on purchased output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdListing = async (\n\tconfig: PurchaseOrdListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlisting,\n\t\tordAddress,\n\t\tadditionalPayments = [],\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\troyalties = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlisting.listingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listing.listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(ordAddress, undefined, metaData),\n\t});\n\n\t// add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listing.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// Add any royalties\n\tfor (const r of royalties) {\n\t\tlet lockingScript: LockingScript | undefined;\n\t\tconst royaltySats = Math.floor(Number(r.percentage) * satoshis);\n\n\t\tswitch (r.type as RoytaltyType) {\n\t\t\tcase RoytaltyType.Paymail:\n\t\t\t\t// resolve paymail address\n\t\t\t\tlockingScript = await resolvePaymail(r.destination, royaltySats);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Script:\n\t\t\t\tlockingScript = Script.fromBinary(\n\t\t\t\t\tUtils.toArray(r.destination, \"base64\"),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase RoytaltyType.Address:\n\t\t\t\tlockingScript = new P2PKH().lock(r.destination);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid royalty type\");\n\t\t}\n\t\tif (!lockingScript) {\n\t\t\tthrow new Error(\"Invalid royalty destination\");\n\t\t}\n\t\ttx.addOutput({\n\t\t\tsatoshis: royaltySats,\n\t\t\tlockingScript,\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif(!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase ordinal listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n\n/**\n *\n * @param {PurchaseOrdTokenListingConfig} config  - Configuration object for purchasing a token listing\n * @param {TokenType} config.protocol - Token protocol\n * @param {string} config.tokenID - Token ID\n * @param {Utxo[]} config.utxos - Utxos to spend (with base64 encoded scripts)\n * @param {PrivateKey} config.paymentPk - Private key to sign payment inputs\n * @param {Utxo} config.listingUtxo - Listing UTXO\n * @param {string} config.ordAddress - Address to send the ordinal to\n * @param {string} [config.changeAddress] - Optional. Address to send change to\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to make\n * @param {MAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include on the purchased transfer inscription output\n * @returns {Promise<ChangeResult>} Transaction, spent outpoints, change utxo\n */\nexport const purchaseOrdTokenListing = async (\n\tconfig: PurchaseOrdTokenListingConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tprotocol,\n\t\ttokenID,\n\t\tutxos,\n\t\tpaymentPk,\n\t\tlistingUtxo,\n\t\tordAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t\tmetaData,\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\tconst tx = new Transaction();\n\n\t// Inputs\n\t// Add the locked ordinal we're purchasing\n\ttx.addInput(\n\t\tinputFromB64Utxo(\n\t\t\tlistingUtxo,\n\t\t\tnew OrdLock().purchaseListing(\n\t\t\t\t1,\n\t\t\t\tScript.fromBinary(Utils.toArray(listingUtxo.script, \"base64\")),\n\t\t\t),\n\t\t),\n\t);\n\n\t// Outputs\n\tconst transferInscription: TransferTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"transfer\",\n\t\tamt: listingUtxo.amt,\n\t};\n\tlet inscription: TransferBSV20Inscription | TransferBSV21Inscription;\n\tif (protocol === TokenType.BSV20) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\ttick: tokenID,\n\t\t} as TransferBSV20Inscription;\n\t} else if (protocol === TokenType.BSV21) {\n\t\tinscription = {\n\t\t\t...transferInscription,\n\t\t\tid: tokenID,\n\t\t} as TransferBSV21Inscription;\n\t} else {\n\t\tthrow new Error(\"Invalid protocol\");\n\t}\n\tconst dataB64 = Buffer.from(JSON.stringify(inscription)).toString(\"base64\");\n\n\t// Add the purchased output\n\ttx.addOutput({\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(\n\t\t\tordAddress,\n\t\t\t{\n\t\t\t\tdataB64,\n\t\t\t\tcontentType: \"application/bsv-20\",\n\t\t\t},\n\t\t\tmetaData,\n\t\t),\n\t});\n\n\tif (!listingUtxo.payout) {\n\t\tthrow new Error(\"Listing UTXO does not have a payout script\");\n\t}\n\n\t// Add the payment output\n\tconst reader = new Utils.Reader(Utils.toArray(listingUtxo.payout, \"base64\"));\n\tconst satoshis = reader.readUInt64LEBn().toNumber();\n\tconst scriptLength = reader.readVarIntNum();\n\tconst scriptBin = reader.read(scriptLength);\n\tconst lockingScript = LockingScript.fromBinary(scriptBin);\n\ttx.addOutput({\n\t\tsatoshis,\n\t\tlockingScript,\n\t});\n\n\t// Add additional payments if any\n\tfor (const p of additionalPayments) {\n\t\ttx.addOutput({\n\t\t\tsatoshis: p.amount,\n\t\t\tlockingScript: new P2PKH().lock(p.to),\n\t\t});\n\t}\n\n\t// add change to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif (!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(\n\t\t\tutxo,\n\t\t\tnew P2PKH().unlock(\n\t\t\t\tpayKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tutxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(utxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to purchase token listing. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\tif (payChange) {\n\t\tconst changeOutput = tx.outputs[tx.outputs.length - 1];\n\t\tpayChange.satoshis = changeOutput.satoshis as number;\n\t\tpayChange.txid = tx.id(\"hex\") as string;\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","import { imageMeta } from \"image-meta\";\nimport { Utils } from \"@bsv/sdk\";\nimport type { IconInscription, ImageContentType } from \"../types\";\nconst { toArray } = Utils;\n\nexport const ErrorOversizedIcon = new Error(\n    \"Image must be a square image with dimensions <= 400x400\",\n);\nexport const ErrorIconProportions = new Error(\"Image must be a square image\");\nexport const ErrorInvalidIconData = new Error(\"Error processing image\");\nexport const ErrorImageDimensionsUndefined = new Error(\n    \"Image dimensions are undefined\",\n);\n\nconst isImageContentType = (value: string): value is ImageContentType => {\n    return (value as ImageContentType) === value;\n};\n\nexport const validIconData = async (\n    icon: IconInscription,\n): Promise<Error | null> => {\n    const { dataB64, contentType } = icon;\n\n    if (contentType === \"image/svg+xml\") {\n        return validateSvg(dataB64);\n    }\n\n    if (!isImageContentType(contentType)) {\n        return ErrorInvalidIconData;\n    }\n\n    try {\n        const buffer = Uint8Array.from(toArray(dataB64, \"base64\"));\n\n        // Meta contains { type, width?, height?, orientation? }\n        const dimensions = imageMeta(buffer);\n\n        if (dimensions.width === undefined || dimensions.height === undefined) {\n            return ErrorImageDimensionsUndefined;\n        }\n        if (dimensions.width !== dimensions.height) {\n            return ErrorIconProportions;\n        }\n        if (dimensions.width > 400 || dimensions.height > 400) {\n            return ErrorOversizedIcon;\n        }\n\n        return null;\n    } catch (error) {\n        return ErrorInvalidIconData;\n    }\n};\n\nconst validateSvg = (svgBase64: string): Error | null => {\n    const svgString = Buffer.from(svgBase64, \"base64\").toString(\"utf-8\");\n    const widthMatch = svgString.match(/<svg[^>]*\\s+width=\"([^\"]+)\"/);\n    const heightMatch = svgString.match(/<svg[^>]*\\s+height=\"([^\"]+)\"/);\n    \n    if (!widthMatch || !heightMatch) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    const width = Number.parseInt(widthMatch[1], 10);\n    const height = Number.parseInt(heightMatch[1], 10);\n\n    if (Number.isNaN(width) || Number.isNaN(height)) {\n        return ErrorImageDimensionsUndefined;\n    }\n\n    if (width !== height) {\n        return ErrorIconProportions;\n    }\n    if (width > 400 || height > 400) {\n        return ErrorOversizedIcon;\n    }\n\n    return null;\n}\n\nexport const validIconFormat = (icon: string): boolean => {\n    if (!icon.includes(\"_\") || icon.endsWith(\"_\")) {\n        return false;\n    }\n\n    const iconVout = Number.parseInt(icon.split(\"_\")[1]);\n    if (Number.isNaN(iconVout)) {\n        return false;\n    }\n\n    if (!icon.startsWith(\"_\") && icon.split(\"_\")[0].length !== 64) {\n        return false;\n    }\n\n    return true;\n};\n\n","import {\n\tTransaction,\n\tP2PKH,\n\tSatoshisPerKilobyte,\n\ttype TransactionOutput,\n\tUtils,\n\tScript,\n} from \"@bsv/sdk\";\nimport type {\n  ChangeResult,\n\tDeployBsv21TokenConfig,\n\tDeployMintTokenInscription,\n\tInscription,\n\tUtxo,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { validIconData, validIconFormat } from \"./utils/icon\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport { DEFAULT_SAT_PER_KB } from \"./constants\";\n\n/**\n * Deploys & Mints a BSV21 token to the given destination address\n * @param {DeployBsv21TokenConfig} config - Configuration object for deploying BSV21 token\n * @param {string} config.symbol - Token ticker symbol\n * @param {number} config.decimals - Number of decimal places to display\n * @param {string | IconInscription} config.icon - outpoint (format: txid_vout) or Inscription. If Inscription, must be a valid image type\n * @param {Utxo[]} config.utxos - Payment Utxos available to spend. Will only consume what is needed.\n * @param {Distribution} config.initialDistribution - Initial distribution with addresses and total supply (not adjusted for decimals, library will add zeros)\n * @param {PrivateKey} config.paymentPk - Private key to sign paymentUtxos\n * @param {string} config.destinationAddress - Address to deploy token to.\n * @param {string} [config.changeAddress] - Optional. Address to send payment change to, if any. If not provided, defaults to paymentPk address\n * @param {number} [config.satsPerKb] - Optional. Satoshis per kilobyte for fee calculation. Default is DEFAULT_SAT_PER_KB\n * @param {Payment[]} [config.additionalPayments] - Optional. Additional payments to include in the transaction\n * @returns {Promise<ChangeResult>} Transaction to deploy BSV 2.1 token\n */\nexport const deployBsv21Token = async (\n\tconfig: DeployBsv21TokenConfig,\n): Promise<ChangeResult> => {\n\tconst {\n\t\tsymbol,\n\t\ticon,\n    decimals,\n\t\tutxos,\n\t\tinitialDistribution,\n\t\tpaymentPk,\n\t\tdestinationAddress,\n\t\tsatsPerKb = DEFAULT_SAT_PER_KB,\n\t\tadditionalPayments = [],\n\t} = config;\n\n\tconst modelOrFee = new SatoshisPerKilobyte(satsPerKb);\n\n\tconst tx = new Transaction();\n\n\tlet iconValue: string;\n\tif (typeof icon === \"string\") {\n\t\ticonValue = icon;\n\t} else {\n\t\tconst iconError = await validIconData(icon);\n\t\tif (iconError) {\n\t\t\tthrow iconError;\n\t\t}\n\t\t// add icon inscription to the transaction\n\t\tconst iconScript = new OrdP2PKH().lock(destinationAddress, icon);\n\t\tconst iconOut = {\n\t\t\tsatoshis: 1,\n\t\t\tlockingScript: iconScript,\n\t\t};\n\t\ttx.addOutput(iconOut);\n\t\t// relative output index of the icon\n\t\ticonValue = \"_0\";\n\t}\n\n\t// Ensure the icon format\n\tif (!validIconFormat(iconValue)) {\n\t\tthrow new Error(\n\t\t\t\"Invalid icon format. Must be either outpoint (format: txid_vout) or relative output index of the icon (format _vout). examples: ecb483eda58f26da1b1f8f15b782b1186abdf9c6399a1c3e63e0d429d5092a41_0 or _1\",\n\t\t);\n\t}\n  \n\t// Outputs\n  const tsatAmt = decimals ? BigInt(initialDistribution.tokens) * 10n ** BigInt(decimals) : BigInt(initialDistribution.tokens);\n\tconst fileData: DeployMintTokenInscription = {\n\t\tp: \"bsv-20\",\n\t\top: \"deploy+mint\",\n\t\tsym: symbol,\n\t\ticon: iconValue,\n\t\tamt: tsatAmt.toString(),\n\t};\n\n  if (decimals) {\n    fileData.dec = decimals.toString();\n  }\n\n\tconst b64File = Buffer.from(JSON.stringify(fileData)).toString(\"base64\");\n\tconst sendTxOut = {\n\t\tsatoshis: 1,\n\t\tlockingScript: new OrdP2PKH().lock(destinationAddress, {\n\t\t\tdataB64: b64File,\n\t\t\tcontentType: \"application/bsv-20\",\n\t\t} as Inscription),\n\t};\n\ttx.addOutput(sendTxOut);\n\n\t// Additional payments\n\tfor (const payment of additionalPayments) {\n\t\tconst sendTxOut: TransactionOutput = {\n\t\t\tsatoshis: payment.amount,\n\t\t\tlockingScript: new P2PKH().lock(payment.to),\n\t\t};\n\t\ttx.addOutput(sendTxOut);\n\t}\n\n\t// Inputs\n\tlet totalSatsIn = 0n;\n\tconst totalSatsOut = tx.outputs.reduce(\n\t\t(total, out) => total + BigInt(out.satoshis || 0),\n\t\t0n,\n\t);\n\tlet fee = 0;\n\tfor (const utxo of utxos) {\n    const payKeyToUse = utxo.pk || paymentPk;\n\t\tif (!payKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the payment\");\n\t\t}\n\t\tconst input = inputFromB64Utxo(utxo, new P2PKH().unlock(\n\t\t\tpayKeyToUse, \n\t\t\t\"all\",\n\t\t\ttrue, \n\t\t\tutxo.satoshis,\n\t\t\tScript.fromBinary(Utils.toArray(utxo.script, 'base64'))\n\t\t));\n\t\ttx.addInput(input);\n\t\t// stop adding inputs if the total amount is enough\n\t\ttotalSatsIn += BigInt(utxo.satoshis);\n\t\tfee = await modelOrFee.computeFee(tx);\n\n\t\tif (totalSatsIn >= totalSatsOut + BigInt(fee)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// make sure we have enough\n\tif (totalSatsIn < totalSatsOut + BigInt(fee)) {\n\t\tthrow new Error(\n\t\t\t`Not enough funds to deploy token. Total sats in: ${totalSatsIn}, Total sats out: ${totalSatsOut}, Fee: ${fee}`,\n\t\t);\n\t}\n\n\t// if we need to send change, add it to the outputs\n\tlet payChange: Utxo | undefined;\n  const changeAddress = config.changeAddress || paymentPk?.toAddress();\n\tif(!changeAddress) {\n\t\tthrow new Error(\"Either changeAddress or paymentPk is required\");\n\t}\n\n\tconst changeScript = new P2PKH().lock(changeAddress);\n\tconst changeOut = {\n\t\tlockingScript: changeScript,\n\t\tchange: true,\n\t};\n\ttx.addOutput(changeOut);\n\n\t// estimate the cost of the transaction and assign change value\n\tawait tx.fee(modelOrFee);\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\t// check for change\n\tconst payChangeOutIdx = tx.outputs.findIndex((o) => o.change);\n\tif (payChangeOutIdx !== -1) {\n\t\tconst changeOutput = tx.outputs[payChangeOutIdx];\n\t\tpayChange = {\n\t\t\tsatoshis: changeOutput.satoshis as number,\n\t\t\ttxid: tx.id(\"hex\") as string,\n\t\t\tvout: payChangeOutIdx,\n\t\t\tscript: Buffer.from(changeOutput.lockingScript.toBinary()).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t};\n\t}\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints: tx.inputs.map(\n\t\t\t(i) => `${i.sourceTXID}_${i.sourceOutputIndex}`,\n\t\t),\n\t\tpayChange,\n\t};\n};\n","\n/** fetch function interface limited to options needed by ts-sdk */\n\nimport type { HttpClient, HttpClientRequestOptions, HttpClientResponse } from \"@bsv/sdk\"\n\n/**\n   * Makes a request to the server.\n   * @param url The URL to make the request to.\n   * @param options The request configuration.\n   */\nexport type Fetch = (url: string, options: FetchOptions) => Promise<Response>\n\n/**\n * An interface for configuration of the request to be passed to the fetch method\n * limited to options needed by ts-sdk.\n */\nexport interface FetchOptions {\n  /** A string to set request's method. */\n  method?: string\n  /** An object literal set request's headers. */\n  headers?: Record<string, string>\n  /** An object or null to set request's body. */\n  body?: string | null\n}\n\n/**\n * Adapter for Node.js Https module to be used as HttpClient\n */\nexport class FetchHttpClient implements HttpClient {\n  constructor (private readonly fetch: Fetch) {}\n\n  async request<D>(url: string, options: HttpClientRequestOptions): Promise<HttpClientResponse<D>> {\n    const fetchOptions: FetchOptions = {\n      method: options.method,\n      headers: options.headers,\n      body: JSON.stringify(options.data)\n    }\n\n    const res = await this.fetch.call(window, url, fetchOptions)\n    const mediaType = res.headers.get('Content-Type')\n    const data = mediaType?.startsWith('application/json') ? await res.json() : await res.text()\n\n    return {\n      ok: res.ok,\n      status: res.status,\n      statusText: res.statusText,\n      data: data as D\n    }\n  }\n}\n","import {\n\ttype BroadcastFailure,\n\ttype Broadcaster,\n\ttype BroadcastResponse,\n\ttype Transaction,\n\ttype HttpClient,\n  Utils,\n} from \"@bsv/sdk\";\nimport { API_HOST } from \"../constants.js\";\nimport { defaultHttpClient } from \"./httpClient.js\";\n\nexport const oneSatBroadcaster = (): Broadcaster => {\n\treturn new OneSatBroadcaster();\n};\n\n/**\n * Represents a 1Sat API transaction broadcaster. This will broadcast through the 1Sat API.\n */\nexport default class OneSatBroadcaster implements Broadcaster {\n\tprivate readonly URL: string;\n\tprivate readonly httpClient: HttpClient;\n\n\t/**\n\t * Constructs an instance of the 1Sat API broadcaster.\n\t *\n\t * @param {HttpClient} httpClient - The HTTP client used to make requests to the API.\n\t */\n\tconstructor(\n\t\thttpClient: HttpClient = defaultHttpClient(),\n\t) {\n\t\tthis.URL = `${API_HOST}/tx`;\n\t\tthis.httpClient = httpClient;\n\t}\n\n\t/**\n\t * Broadcasts a transaction via WhatsOnChain.\n\t *\n\t * @param {Transaction} tx - The transaction to be broadcasted.\n\t * @returns {Promise<BroadcastResponse | BroadcastFailure>} A promise that resolves to either a success or failure response.\n\t */\n\tasync broadcast(\n\t\ttx: Transaction,\n\t): Promise<BroadcastResponse | BroadcastFailure> {\n\t\tconst rawtx = Utils.toBase64(tx.toBinary());\n\n\t\tconst requestOptions = {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAccept: \"application/json\",\n\t\t\t},\n\t\t\tdata: { rawtx },\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await this.httpClient.request<string>(\n\t\t\t\tthis.URL,\n\t\t\t\trequestOptions,\n\t\t\t);\n\t\t\tif (response.ok) {\n\t\t\t\tconst txid = response.data;\n\t\t\t\treturn {\n\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\ttxid,\n\t\t\t\t\tmessage: \"broadcast successful\",\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tstatus: \"error\",\n\t\t\t\tcode: response.status.toString() ?? \"ERR_UNKNOWN\",\n\t\t\t\tdescription: response.data.message ?? \"Unknown error\",\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tstatus: \"error\",\n\t\t\t\tcode: \"500\",\n\t\t\t\tdescription: error instanceof Error\n\t\t\t\t\t? error.message\n\t\t\t\t\t: \"Internal Server Error\",\n\t\t\t};\n\t\t}\n\t}\n}\n\n","import { type HttpClient, type HttpClientResponse, NodejsHttpClient } from \"@bsv/sdk\"\nimport { FetchHttpClient } from \"./fetch\"\n\nexport function defaultHttpClient (): HttpClient {\n  const noHttpClient: HttpClient = {\n    async request (..._): Promise<HttpClientResponse> {\n      throw new Error('No method available to perform HTTP request')\n    }\n  }\n\n  if (typeof window !== 'undefined' && typeof window.fetch === 'function') {\n    const originalFetch = window.fetch\n\n    window.fetch = async (...args) => {\n      return await originalFetch(...args)\n    }\n\n    // Use fetch in a browser environment\n    return new FetchHttpClient(window.fetch)\n  }\n  if (typeof require !== 'undefined') {\n    // Use Node.js https module\n    try {\n      const https = require('node:https')\n      return new NodejsHttpClient(https)\n    } catch (e) {\n      return noHttpClient\n    }\n  } else {\n    return noHttpClient\n  }\n}\n","import {\n\tTransaction,\n\tSatoshisPerKilobyte,\n\tScript,\n\tUtils,\n  PrivateKey,\n} from \"@bsv/sdk\";\nimport { DEFAULT_SAT_PER_KB, MAP_PREFIX } from \"./constants\";\nimport OrdP2PKH from \"./templates/ordP2pkh\";\nimport type {\n  BaseResult,\n\tBurnOrdinalsConfig,\n} from \"./types\";\nimport { inputFromB64Utxo } from \"./utils/utxo\";\nimport { toHex } from \"./utils/strings\";\n\n/**\n * Burn ordinals by consuming them as fees\n * @param {BurnOrdinalsConfig} config - Configuration object for sending ordinals\n * @param {PrivateKey} config.ordPk - Private key to sign ordinals\n * @param {Utxo} config.ordinals - 1Sat Ordinal Utxos to spend (with base64 encoded scripts)\n * @param {BurnMAP} [config.metaData] - Optional. MAP (Magic Attribute Protocol) metadata to include in an unspendable output OP_FALSE OP_RETURN\n * @returns {Promise<BaseResult>} Transaction, spent outpoints\n */\nexport const burnOrdinals = async (\n\tconfig: BurnOrdinalsConfig,\n): Promise<BaseResult> => {\n\tconst tx = new Transaction();\n\tconst spentOutpoints: string[] = [];\n\tconst { ordinals, metaData, ordPk } = config;\n\n\t// Inputs\n\t// Add ordinal inputs\n\tfor (const ordUtxo of ordinals) {\n\t\tif (ordUtxo.satoshis !== 1) {\n\t\t\tthrow new Error(\"1Sat Ordinal utxos must have exactly 1 satoshi\");\n\t\t}\n    const ordKeyToUse = ordUtxo.pk || ordPk;\n\t\tif(!ordKeyToUse) {\n\t\t\tthrow new Error(\"Private key is required to sign the ordinal\");\n\t\t}\n\n\t\tconst input = inputFromB64Utxo(\n\t\t\tordUtxo,\n\t\t\tnew OrdP2PKH().unlock(\n\t\t\t\tordKeyToUse,\n\t\t\t\t\"all\",\n\t\t\t\ttrue,\n\t\t\t\tordUtxo.satoshis,\n\t\t\t\tScript.fromBinary(Utils.toArray(ordUtxo.script, \"base64\")),\n\t\t\t),\n\t\t);\n\t\tspentOutpoints.push(`${ordUtxo.txid}_${ordUtxo.vout}`);\n\t\ttx.addInput(input);\n\t}\n\n\t// Outputs\n\t// Add metadata output\n\n\t// MAP.app and MAP.type keys are required\n\tif (metaData && (!metaData.app || !metaData.type)) {\n\t\tthrow new Error(\"MAP.app and MAP.type are required fields\");\n\t}\n\n\tlet metaAsm = \"\";\n\n\tif (metaData?.app && metaData?.type) {\n\t\tconst mapPrefixHex = toHex(MAP_PREFIX);\n\t\tconst mapCmdValue = toHex(\"SET\");\n\t\tmetaAsm = `OP_FALSE OP_RETURN ${mapPrefixHex} ${mapCmdValue}`;\n\n\t\tfor (const [key, value] of Object.entries(metaData)) {\n\t\t\tif (key !== \"cmd\") {\n\t\t\t\tmetaAsm = `${metaAsm} ${toHex(key)} ${toHex(value as string)}`;\n\t\t\t}\n\t\t}\n\t}\n\n\ttx.addOutput({\n\t\tsatoshis: 0,\n\t\tlockingScript: Script.fromASM(metaAsm || \"OP_FALSE OP_RETURN\"),\n\t});\n\n\t// Sign the transaction\n\tawait tx.sign();\n\n\treturn {\n\t\ttx,\n\t\tspentOutpoints,\n\t};\n};\n","// import { PaymailClient } from \"@bsv/paymail\";\nimport { LockingScript } from \"@bsv/sdk\";\n\n// const client = new PaymailClient();\n\nexport const resolvePaymail = async (paymailAddress: string, amtToReceive: number): Promise<LockingScript> => {\n  // const destinationTx = await client.getP2pPaymentDestination(paymailAddress, amtToReceive);\n  // // TODO: we are assuming only one output but in reality it can be many\n  // return destinationTx.outputs[0].script as LockingScript;\n  throw new Error(\"Not implemented\");\n}","import type { CollectionItemSubTypeData, CollectionSubTypeData } from \"./types\";\n\n/**\n * Validates sub type data\n * @param {string} subType - Sub type of the ordinals token\n * @param {string} subTypeData - Sub type data of the ordinals token\n * @returns {Error | undefined} Error if validation fails, undefined if validation passes\n */\nexport const validateSubTypeData = (\n  subType: \"collection\" | \"collectionItem\",\n  subTypeData: CollectionItemSubTypeData | CollectionSubTypeData,\n): Error | undefined => {\n  try {\n    if (subType === \"collection\") {\n      const collectionData = subTypeData as CollectionSubTypeData;\n      if (!collectionData.description) {\n        return new Error(\"Collection description is required\");\n      }\n      if (!collectionData.quantity) {\n        return new Error(\"Collection quantity is required\");\n      }\n      if (collectionData.rarityLabels) {\n        if (!Array.isArray(collectionData.rarityLabels)) {\n          return new Error(\"Rarity labels must be an array\");\n        }\n        // make sure keys and values are strings\n        if (!collectionData.rarityLabels.every((label) => {\n          return Object.values(label).every(value => typeof value === 'string');\n        })) {\n          return new Error(`Invalid rarity labels ${collectionData.rarityLabels}`);\n        }\n      }\n      if (collectionData.traits ) {\n        if (typeof collectionData.traits !== \"object\") {\n        return new Error(\"Collection traits must be an object\");\n        }\n        if (collectionData.traits && !Object.keys(collectionData.traits).every(key => typeof key === 'string' && typeof collectionData.traits[key] === 'object')) {\n          return new Error(\"Collection traits must be a valid CollectionTraits object\");\n        }\n      }\n    }\n    if (subType === \"collectionItem\") {\n      const itemData = subTypeData as CollectionItemSubTypeData;\n      if (!itemData.collectionId) {\n        return new Error(\"Collection id is required\");\n      }\n      if (!itemData.collectionId.includes(\"_\")) {\n        return new Error(\"Collection id must be a valid outpoint\");\n      }\n      if (itemData.collectionId.split(\"_\")[0].length !== 64) {\n        return new Error(\"Collection id must contain a valid txid\");\n      }\n      if (Number.isNaN(Number.parseInt(itemData.collectionId.split(\"_\")[1]))) {\n        return new Error(\"Collection id must contain a valid vout\");\n      }\n\n      if (itemData.mintNumber && typeof itemData.mintNumber !== \"number\") {\n        return new Error(\"Mint number must be a number\");\n      }\n      if (itemData.rank && typeof itemData.rank !== \"number\") {\n        return new Error(\"Rank must be a number\");\n      }\n      if (itemData.rarityLabel && typeof itemData.rarityLabel !== \"string\") {\n        return new Error(\"Rarity label must be a string\");\n      }\n      if (itemData.traits && typeof itemData.traits !== \"object\") {\n        return new Error(\"Traits must be an object\");\n      }\n      if (itemData.attachments && !Array.isArray(itemData.attachments)) {\n        return new Error(\"Attachments must be an array\");\n      }\n    }\n    return undefined;\n  } catch (error) {\n    return new Error(\"Invalid JSON data\");\n  }\n};"],"names":["TokenSelectionStrategy","TokenType","RoytaltyType","TokenInputMode","toHex","utf8Str","Buffer","from","toString","MAP_PREFIX","DEFAULT_SAT_PER_KB","API_HOST","OrdP2PKH","_P2PKH","apply","this","arguments","_inheritsLoose","prototype","lock","address","inscription","metaData","lockingScript","P2PKH","applyInscription","withSeparator","ordAsm","undefined","dataB64","contentType","ordHex","fileHex","trim","Error","fileMediaType","inscriptionAsm","toASM","app","type","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","value","LockingScript","fromASM","MAX_TOKEN_SUPPLY","Math","pow","fromBase58Check","Utils","inputFromB64Utxo","utxo","unlockScriptTemplate","fromUtxo","_extends","script","signData","tx","signer","_exit","_temp2","_result","idKey","keyHost","_sigma$sign","Sigma","sign","Promise","resolve","signedTx","_temp","authToken","sigma","remoteSign","then","_ref","_catch","e","console","log","reject","stringifyMetaData","result","Array","isArray","JSON","stringify","String","pact","state","s","_Pact","o","bind","v","_settle","observer","onFulfilled","_this","onRejected","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","callback","OrdLock","_proto","ordAddress","payAddress","price","cancelPkh","data","payPkh","Script","writeScript","fromHex","writeBin","buildOutput","toBinary","cancelListing","privateKey","signOutputs","anyoneCanPay","sourceSatoshis","p2pkh","unlock","inputIndex","_p2pkh$sign","writeOpCode","OP","OP_1","estimateLength","purchaseListing","purchase","_input$sourceTransact","outputs","UnlockingScript","satoshis","_step","writer","Writer","_iterator","_createForOfIteratorHelperLoose","slice","done","output","write","toArray","OP_0","input","inputs","sourceSats","sourceTransaction","sourceOutputIndex","_input$sourceTransact2","sourceTXID","id","subscript","preimage","TransactionSignature","format","transactionVersion","version","otherInputs","inputSequence","sequence","lockTime","scope","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_FORKID","_purchase$sign","writeUInt64LEBn","BigNumber","writeVarIntNum","_forOf","check","target","step","_cycle","next","return","_fixup","TypeError","values","i","push","array","body","_forTo","ErrorOversizedIcon","ErrorIconProportions","ErrorInvalidIconData","ErrorImageDimensionsUndefined","FetchHttpClient","fetch","request","url","options","fetchOptions","method","headers","call","window","res","mediaType","get","startsWith","json","text","ok","status","statusText","OneSatBroadcaster","httpClient","noHttpClient","originalFetch","require","https","NodejsHttpClient","defaultHttpClient","URL","broadcast","requestOptions","Accept","rawtx","toBase64","response","_response$status$toSt","_response$data$messag","txid","message","code","description","error","config","Transaction","spentOutpoints","ordPk","ordinals","ordUtxo","ordKeyToUse","pk","fromBinary","vout","addInput","metaAsm","mapPrefixHex","addOutput","_interrupt","totalSatsIn","totalSatsOut","BigInt","fee","modelOrFee","payChangeOutIdx","findIndex","change","changeOutput","payChange","map","utxos","listingUtxos","paymentPk","_config$additionalPay","additionalPayments","_config$satsPerKb","satsPerKb","warn","SatoshisPerKilobyte","listingUtxo","toAddress","_iterator2","_step2","p","amount","to","changeAddress","changeScript","reduce","total","out","payKeyToUse","computeFee","_modelOrFee$computeFe","_interrupt2","_temp4","_result2","tokenChange","amt","totalAmtIn","tokenID","protocol","_config$satsPerKb2","every","token","_step3","_iterator3","Number","parseInt","transferInscription","op","BSV20","tick","BSV21","destination","_step4","_iterator4","_temp3","_modelOrFee$computeFe2","_exit2","listings","listing","inputScriptBinary","inputScript","tc","_config$additionalPay2","tokenChangeAddress","inputTokens","decimals","changeAmt","totalAmtOut","bigAmt","toTokenSat","tokens","ReturnTypes","_step5","_iterator5","destinations","_Object$keys","keys","pop","_signData","iconValue","icon","includes","endsWith","iconVout","split","isNaN","validIconFormat","tsatAmt","initialDistribution","fileData","sym","symbol","dec","b64File","sendTxOut","destinationAddress","payment","svgBase64","svgString","widthMatch","match","heightMatch","width","height","validateSvg","buffer","Uint8Array","dimensions","imageMeta","validIconData","iconError","iconScript","collectionId","limit","offset","scriptEncoding","b64Query","subTypeData","nftUtxos","outpoints","filter","u","_u$data","list","concat","nftRes","nfts","nftUtxo","origin","outpoint","payUrl","payRes","payUtxos","pubKeyHash","p2pkhScript","tokenId","tokenUtxos","_temp6","_result3","_config$royalties","royalties","reader","Reader","payout","readUInt64LEBn","toNumber","scriptLength","readVarIntNum","scriptBin","read","_temp5","r","royaltySats","floor","percentage","_switch","Paymail","resolvePaymail","_resolvePaymail","Address","_temp8","_interrupt3","_result4","_temp7","_exit3","requiredTokens","_options$inputStrateg","inputStrategy","RetainOrder","_options$outputStrate","outputStrategy","totalSelected","selectedUtxos","sort","a","b","amtA","amtB","SmallestFirst","LargestFirst","Random","random","toToken","isEnough","enforceUniformSend","_destination$inscript","_destination$inscript2","paymentUtxos","changeOut","payments","distributions","_config$burn","burn","_config$tokenInputMod","tokenInputMode","Needed","_config$splitConfig","splitConfig","omitMetaData","changeTsats","tokensToUse","totalTsatIn","totalTsatOut","totalAmtNeeded","acc","dist","All","dest","distTokenSat","inscriptionObj","splitOutputs","tokenChanges","threshold","maxOutputs","splitChangeAmt","min","baseChangeAmount","max","remainder","splitAmount","splitChangeOutputs","subType","collectionData","quantity","rarityLabels","label","traits","itemData","mintNumber","rank","rarityLabel","attachments"],"mappings":"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"}