import { PeerSession } from './types.js';
/**
 * Manages sessions for peers, allowing sessions to be added, retrieved, updated, and removed
 * by relevant identifiers (sessionNonce and peerIdentityKey).
 */
export declare class SessionManager {
    private readonly identifierToSession;
    constructor();
    /**
     * Adds a session to the manager, associating it with relevant identifiers for retrieval.
     *
     * @param {PeerSession} session - The peer session to add.
     */
    addSession(session: PeerSession): void;
    /**
     * Updates a session in the manager, ensuring that all identifiers are correctly associated.
     *
     * @param {PeerSession} session - The peer session to update.
     */
    updateSession(session: PeerSession): void;
    /**
     * Retrieves a session based on a given identifier.
     *
     * @param {string} identifier - The identifier for the session (sessionNonce or peerIdentityKey).
     * @returns {PeerSession | undefined} - The matching peer session, or undefined if not found.
     */
    getSession(identifier: string): PeerSession | undefined;
    /**
     * Removes a session from the manager by clearing all associated identifiers.
     *
     * @param {PeerSession} session - The peer session to remove.
     */
    removeSession(session: PeerSession): void;
    /**
     * Checks if a session exists based on a given identifier.
     *
     * @param {string} identifier - The identifier to check.
     * @returns {boolean} - True if the session exists, false otherwise.
     */
    hasSession(identifier: string): boolean;
}
//# sourceMappingURL=SessionManager.d.ts.map