type ReturnType = "string" | "bigint" | "number";
type RT<T extends ReturnType> = T extends "string" ? string : T extends "bigint" ? bigint : number;
export declare const ReturnTypes: {
    String: "string";
    BigInt: "bigint";
    Number: "number";
};
/**
 * Convert token-sat to token
 * @param tokenSat Amount of token-sat to convert. Must be a whole number
 * @param decimals Number of decimal places for the token
 * @param returnString Optionally return the value as a string
 */
export declare function toToken<T extends ReturnType = "number">(tokenSat: number | string | bigint, decimals: number, returnType?: T): RT<T>;
/**
 * Convert token to token-sat
 * @param token Amount of token to convert
 * @param decimals Number of decimal places for the token
 * @param returnString Optionally return the value as a string
 */
export declare function toTokenSat<T extends ReturnType = "number">(token: number | string | bigint, decimals: number, returnType?: T): RT<T>;
/**
 * Convert Bitcoin to Satoshis
 * @param token Amount of token to convert
 * @param returnString Optionally return the value as a string
 */
export declare function toSatoshi<T extends ReturnType = "number">(token: number | string | bigint, returnType?: T): RT<T>;
/**
 * Convert Satoshis to Bitcoin
 * @param tokenSat Amount of token-sat to convert
 * @param returnString Optionally return the value as a string
 */
export declare function toBitcoin<T extends ReturnType = "number">(tokenSat: number | string | bigint, returnType?: T): RT<T>;
export {};
