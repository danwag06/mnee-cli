!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t||self).satoshiToken={})}(this,function(t){function e(){return[].slice.call(arguments).every(function(t){return"string"==typeof t})}function n(){return[].slice.call(arguments).every(function(t){return"number"==typeof t})}function r(t,r,i){if(!e(t)&&!n(t))throw new TypeError("toToken must be called on a number or string, got "+typeof t);if(!Number.isInteger(Number(t)))throw new TypeError("toToken must be called on a whole number or string format whole number");if(!Number.isInteger(r)||r<0)throw new TypeError("decimals must be a non-negative integer");var o=0n,a="string"==typeof t?t.startsWith("-"):t<0;switch(typeof t){case"bigint":o=t;break;case"string":o=BigInt(t.replace("-","").split(".")[0]);break;default:o=BigInt(Math.abs(Math.round(t)))}var u=a?-1n:1n,s=o/Math.pow(10n,BigInt(r)),f=o%Math.pow(10n,BigInt(r));switch(i){case"bigint":if(f>0)throw new Error("toToken: Cannot return a bigint with decimal part");return s*u;case"string":return(a&&(s>0||f>0)?"-":"")+s+"."+f.toString().padStart(r,"0");default:return Number((a&&(s>0||f>0)?"-":"")+s+"."+f.toString().padStart(r,"0"))}}function i(t,r,i){if(!e(t)&&!n(t)&&!function(){return[].slice.call(arguments).every(function(t){return"bigint"==typeof t})}(t))throw new TypeError("toTokenSat must be called on a number, string or bigint, got "+typeof t);if(!Number.isInteger(r)||r<0)throw new TypeError("decimals must be a non-negative integer");var o="",a="string"==typeof t?t.startsWith("-")&&"-0"!==t:t<0;switch(typeof t){case"bigint":o=(t*Math.pow(10n,BigInt(r))).toString();break;case"string":var u=t.replace("-","").split("."),s=u[0],f=u[1];o=s+(f||"").padEnd(r,"0"),!a||"0"===s&&"0"===f||(o="-"+o);break;default:o=(Math.round(Math.abs(t)*Math.pow(10,r))*(a?-1:1)).toString()}switch(i){case"bigint":return BigInt(o);case"string":return o;default:var g;try{g=Number(o)}catch(t){throw new Error("Invalid number: "+o)}if(!Number.isSafeInteger(Math.round(g)))throw new Error("Integer overflow. Try returning a string instead.");return g}}t.ReturnTypes={String:"string",BigInt:"bigint",Number:"number"},t.toBitcoin=function(t,e){return r(t,8,e)},t.toSatoshi=function(t,e){return i(t,8,e)},t.toToken=r,t.toTokenSat=i});
//# sourceMappingURL=index.umd.js.map
